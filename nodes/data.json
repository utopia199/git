{"css":[{"id":1,"body":"<h1 id=\"a2\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1. 变量声明;</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">sass</code>变量的声明和<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>属性的声明很像：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$highlight-color: #F90;</code></pre>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">这意味着变量<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$highlight-color</code>现在的值是<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">#F90</code>。任何可以用作<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>属性值的赋值都 可以用作<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">sass</code>的变量值，甚至是以空格分割的多个属性值，如<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$basic-border: 1px solid black;</code>，或以逗号分割的多个属性值，如<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$plain-font: \"Myriad Pro\"、Myriad、\"Helvetica Neue\"、Helvetica、\"Liberation Sans\"、Arial和sans-serif; sans-serif;</code>。这时变 量还没有生效，除非你引用这个变量&mdash;&mdash;我们很快就会了解如何引用。</p>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">与<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">CSS</code>属性不同，变量可以在<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>规则块定义之外存在。当变量定义在<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>规则块内，那么该变量只能在此规则块内使用。如果它们出现在任何形式的<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">{...}</code>块中（如<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@media</code>或者<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@font-face</code>块），情况也是如此：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$nav-color: #F90;\nnav {\n  $width: 100px;\n  width: $width;\n  color: $nav-color;\n}\n</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2. 相邻组合选择器</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">你可以用同层相邻组合选择器<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">+</code>选择<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">header</code>元素后紧跟的<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">p</code>元素：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"css\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">header + p { font-size: 1.1em }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-3. 混合器</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">如果网站中有几处小小的样式类似（例如一致的颜色和字体），那么使用变量来统一处理这种情况是非常不错的选择。但是当你的样式变得越来越复杂，你需要大段大段的重用样式的代码，独立的变量就没办法应付这种情况了。</p>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">混合器使用<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@mixin</code>标识符定义。看上去很像其他的<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">CSS @</code>标识符，比如说<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@media</code>或者<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@font-face</code>。这个标识符给一大段样式赋予一个名字，这样你就可以轻易地通过引用这个名字重用这段样式。下边的这段<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">sass</code>代码</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">@mixin rounded-corners {\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}</code></pre>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">然后就可以在你的样式表中通过<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>来使用这个混合器，放在你希望的任何地方。<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>调用会把混合器中的所有样式提取出来放在<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>被调用的地方。如果像下边这样写：</p>\n<pre class=\"pre-bottom\" style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">notice {\n  @include rounded-corners;\n}\n</code></pre>\n<p><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">&nbsp;</code></p>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-4. 给混合器传参;</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">混合器并不一定总得生成相同的样式。可以通过在<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>混合器时给混合器传参，来定制混合器生成的精确样式。当<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>混合器时，参数其实就是可以赋值给<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>属性值的变量。如果你写过<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">JavaScript</code>，这种方式跟<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">JavaScript</code>的<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">function</code>很像：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &amp;:hover { color: $hover; }\n  &amp;:visited { color: $visited; }\n}</code></pre>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">当混合器被<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@include</code>时，你可以把它当作一个<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>函数来传参。如果你像下边这样写：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">a {\n  @include link-colors(blue, red, green);\n}\n</code></pre>\n<p><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">&nbsp;</code></p>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-5. 继承;</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">使用<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">sass</code>的时候，最后一个减少重复的主要特性就是选择器继承。基于<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">Nicole Sullivan</code>面向对象的<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">css</code>的理念，选择器继承是说一个选择器可以继承为另一个选择器定义的所有样式。这个通过<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@extend</code>语法实现，如下代码:</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">//通过选择器继承继承样式\n.error {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}</code></pre>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-1. 控制指令@if；</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 20px; font-size: 16px; line-height: 1.8em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">当&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@if</code>&nbsp;的表达式返回值不是&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">false</code>&nbsp;或者&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">null</code>&nbsp;时，条件成立，输出&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">{}</code>&nbsp;内的代码：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">p {\n  @if 1 + 1 == 2 { border: 1px solid; }\n  @if 5 &lt; 3 { border: 2px dotted; }\n  @if null  { border: 3px double; }\n}</code></pre>\n<p style=\"box-sizing: border-box; margin: 0px 0px 20px; font-size: 16px; line-height: 1.8em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@if</code>&nbsp;声明后面可以跟多个&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@else if</code>&nbsp;声明，或者一个&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@else</code>&nbsp;声明。如果&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@if</code>&nbsp;声明失败，Sass 将逐条执行&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@else if</code>&nbsp;声明，如果全部失败，最后执行&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@else</code>&nbsp;声明，例如：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$type: monster;\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}</code></pre>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-2. 控制指令@for；</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 20px; font-size: 16px; line-height: 1.8em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@for</code>&nbsp;指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@for $var from &lt;start&gt; through &lt;end&gt;</code>，或者&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@for $var from &lt;start&gt; to &lt;end&gt;</code>，区别在于&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">through</code>&nbsp;与&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">to</code>&nbsp;的含义：<em style=\"box-sizing: border-box;\">当使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">through</code>&nbsp;时，条件范围包含&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;start&gt;</code>&nbsp;与&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;end&gt;</code>&nbsp;的值，而使用&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">to</code>&nbsp;时条件范围只包含&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;start&gt;</code>&nbsp;的值不包含&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;end&gt;</code>&nbsp;的值</em>。另外，<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$var</code>&nbsp;可以是任何变量，比如&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$i</code>；<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;start&gt;</code>&nbsp;和&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">&lt;end&gt;</code>&nbsp;必须是整数值。</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n</code></pre>\n<p style=\"box-sizing: border-box; margin: 0px 0px 20px; font-size: 16px; line-height: 1.8em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">编译为</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-css\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.item-1 {\n  width: 2em; }\n.item-2 {\n  width: 4em; }\n.item-3 {\n  width: 6em; }</code></pre>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-3. 控制指令@while；</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 20px; font-size: 16px; line-height: 1.8em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@while</code>&nbsp;指令重复输出格式直到表达式返回结果为&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">false</code>。这样可以实现比&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14.4px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@for</code>&nbsp;更复杂的循环，只是很少会用到。例如：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$i: 6;\n@while $i &gt; 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n</code></pre>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 13px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"lang-css\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.item-6 {\n  width: 12em; }\n\n.item-4 {\n  width: 8em; }\n\n.item-2 {\n  width: 4em; }</code></pre>\n<h1 id=\"e4\" class=\"title font anchor\" style=\"box-sizing: border-box; margin: 20px 0px 10px; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-4. 控制指令@each；</h1>\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-size: 18px; line-height: 2.2em; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@each</code>&nbsp;指令同样可以用于循环输出，和&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@for</code>&nbsp;的差别在于，<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@each</code>&nbsp;通过遍历&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">list</code>&nbsp;或者&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">map</code>&nbsp;实现循环输出：</p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">@each $usr in bob, john, bill, mike {\n    .#{$usr}-avatar {\n        background-image: url('/img/#{$usr}.png');\n     }\n}</code></pre>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">@each</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">&nbsp;后面的&nbsp;</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">$usr</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">&nbsp;变量用于保存每次遍历到的元素，然后使用差值语法（</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">#{var}</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">）来拼接正确的图片路径，编译结果如下：</span></p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.bob-avatar {\n    background-image: url(\"/img/bob.png\");\n}\n\n.john-avatar {\n    background-image: url(\"/img/john.png\");\n}\n\n.bill-avatar {\n    background-image: url(\"/img/bill.png\");\n}\n\n.mike-avatar {\n    background-image: url(\"/img/mike.png\");\n}</code></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">如果遍历的对象是一个&nbsp;</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">map</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">，那么我们就可以使用两个变量来存储元素的&nbsp;</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">key</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">&nbsp;和&nbsp;</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">value</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">，示例如下：</span></p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$ppl: ( usr1:bob, usr2:john, usr3:bill, usr4:mike );\n\n@each $key, $usr in $ppl  {\n    .#{$usr}-avatar {\n        background-image: url('/img/#{$usr}.png');\n    }\n}</code></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">此外，针对多个列表的遍历，我们也可以使用多个参数来保存相应的元素：</span></p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">$alt: alert, yellow, red;\n\n$sub: submit, white, green;\n\n$bck: back, blue, transparent;\n\n@each $type, $txt, $back in $alt,$sub,$bck {\n    .#{$type}-button {\n        color: $txt;\n        background-color: $back;\n    }\n}</code></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">编译结果如下：</span></p>\n<pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.alert-button {\n    color: yellow;\n    background-color: red;\n}\n\n.submit-button {\n    color: white;\n    background-color: green;\n}\n\n.back-button {\n    color: blue;\n    background-color: transparent;\n}</code></pre>\n<p><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"noopener\">参考文档https://www.sass.hk/</a></p>"},{"id":2,"body":"<h1 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Less语法</h1>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1.&nbsp;无参数方法</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">要点：&ldquo;.&rdquo;与&ldquo;#&rdquo;都可以作为方法前缀。可以不适用小括号，但是为了避免css格式混淆，建议加上小括号&ldquo;（）&rdquo;。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.card(){\n//something....\n}\n#wrap{\n  .card();\n}</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2.&nbsp;具体参数方法</h1>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.setSize(@width_size,@height_size){\n  width:@width_size;\n  height:@height_size;\n}</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-3.&nbsp;默认参数方法</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Less 可以使用默认参数，如果没有传参数，那么将使用默认参数。 @arguments 犹如 JS 中的 arguments 指代的是全部参数。 传的参数中 必须带着单位。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">/* Less */\n      .border(@a:10px,@b:50px,@c:30px,@color:#000){\n          border:solid 1px @color;\n          box-shadow: @arguments;//指代的是 全部参数\n      }\n      #main{\n          .border(0px,5px,30px,red);//必须带着单位\n      }\n      #wrap{\n          .border(0px);\n      }\n      #content{\n        .border;//等价于 .border()\n      }\n    \n      /* 生成的 CSS */\n      #main{\n          border:solid 1px red;\n          box-shadow:0px,5px,30px,red;\n      }\n      #wrap{\n          border:solid 1px #000;\n          box-shadow: 0px 50px 30px #000;\n      }\n      #content{\n          border:solid 1px #000;\n          box-shadow: 10px 50px 30px #000;\n      }  </code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-4. 不定参</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">不确定参数的个数</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">.boxShadow(...){\n          box-shadow: @arguments;\n      }\n      .textShadow(@a,...){\n          text-shadow: @arguments;\n      }\n      #main{\n          .boxShadow(1px,4px,30px,red);\n          .textShadow(1px,4px,30px,red);\n      }\n      /* 生成后的 CSS */\n      #main{\n        box-shadow: 1px 4px 30px red;\n        text-shadow: 1px 4px 30px red;\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-5.&nbsp;方法的匹配模式</h1>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">类似于多态。有点类似于switch case，同一个方法名的多个方法，由于传入的参数不同而实现不同的功能。</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"> /* Less */\n      .triangle(top,@width:20px,@color:#000){\n          border-color:transparent  transparent @color transparent ;\n      }\n      .triangle(right,@width:20px,@color:#000){\n          border-color:transparent @color transparent  transparent ;\n      }\n    \n      .triangle(bottom,@width:20px,@color:#000){\n          border-color:@color transparent  transparent  transparent ;\n      }\n      .triangle(left,@width:20px,@color:#000){\n          border-color:transparent  transparent  transparent @color;\n      }\n      .triangle(@_,@width:20px,@color:#000){\n          border-style: solid;\n          border-width: @width;\n      }\n      #main{\n          .triangle(left, 50px, #999)\n      }\n      /* 生成的 CSS */\n      #main{\n        border-color:transparent  transparent  transparent #999;\n        border-style: solid;\n        border-width: 50px;\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-1.&nbsp;条件语句</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Less没有if / else 但是less具有一个when，and，not与&ldquo;，&rdquo;语法。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"> /* Less */\n    #card{\n        // and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行\n        .border(@width,@color,@style) when (@width&gt;100px) and(@color=#999){\n            border:@style @color @width;\n        }\n        // not 运算符，相当于 非运算 !，条件为 不符合才会执行\n        .background(@color) when not (@color&gt;=#222){\n            background:@color;\n        }\n        // , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行\n        .font(@size:20px) when (@size&gt;50px) , (@size&lt;100px){\n            font-size: @size;\n        }\n    }\n    #main{\n        #card&gt;.border(200px,#999,solid);\n        #card .background(#111);\n        #card &gt; .font(40px);\n    }\n    /* 生成后的 CSS */\n    #main{\n      border:solid #999 200px;\n      background:#111;\n      font-size:40px;\n    }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">2-2.&nbsp;循环语法</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Less并没有提供一个for等循环的方法但是可以使用递归的方法实现。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"> /* Less */\n      .generate-columns(4);\n      .generate-columns(@n, @i: 1) when (@i =&lt; @n) {\n        .column-@{i} {\n          width: (@i * 100% / @n);\n        }\n        .generate-columns(@n, (@i + 1));\n      }\n      /* 生成后的 CSS */\n      .column-1 {\n        width: 25%;\n      }\n      .column-2 {\n        width: 50%;\n      }\n      .column-3 {\n        width: 75%;\n      }\n      .column-4 {\n        width: 100%;\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">3-1.&nbsp;继承</h1>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">extend是less的一个</span><span style=\"box-sizing: border-box; font-weight: 600; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">伪类</span><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">。它可以继承所匹配声明中的全部样式。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">/* Less */\n      .animation{\n          transition: all .3s ease-out;\n          .hide{\n            transform:scale(0);\n          }\n      }\n      #main{\n          &amp;:extend(.animation);\n      }\n      #con{\n          &amp;:extend(.animation .hide);\n      }\n    \n      /* 生成后的 CSS */\n      .animation,#main{\n        transition: all .3s ease-out;\n      }\n      .animation .hide , #con{\n          transform:scale(0);\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">3-2. all全局搜索替换</h1>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">/* Less */\n      #main{\n        width: 200px;\n      }\n      #main {\n        &amp;:after {\n          content:\"Less is good!\";\n        }\n      }\n      #wrap:extend(#main all) {}\n    \n      /* 生成的 CSS */\n      #main,#wrap{\n        width: 200px;\n      }\n      #main:after, #wrap:after {\n          content: \"Less is good!\";\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">4-1. Less中使用js</h1>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">less本身是使用js实现的，所以在less中可以使用js。Js的代码写在字符串模板里<code style=\"box-sizing: border-box; font-size: 12px; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; padding: 2px 4px; border: none; vertical-align: middle; white-space: pre-wrap; color: #c7254e; background-color: #f2f2f2;\"></code>。</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"> /* Less */\n      @content:`\"aaa\".toUpperCase()`;\n      #randomColor{\n        @randomColor: ~\"rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)\";\n      }\n      #wrap{\n        width: ~\"`Math.round(Math.random() * 100)`px\";\n        &amp;:after{\n            content:@content;\n        }\n        height: ~\"`window.innerHeight`px\";\n        alert:~\"`alert(1)`\";\n        #randomColor();\n        background-color: @randomColor;\n      }\n      /* 生成后的 CSS */\n    \n      // 弹出 1\n      #wrap{\n        width: 随机值（0~100）px;\n        height: 743px;//由电脑而异\n        background: 随机颜色;\n      }\n      #wrap::after{\n        content:\"AAA\";\n      }</code></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">4-2. Less的函数</h1>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Isnumber():判断是否为数字</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Iscolor():判断是否是颜色</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Isurl():判断是否是路径</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">saturate:增加一定数值的颜色饱和度</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">lighten:增加一定数值的颜色亮度</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">darken:降低一定数值的颜色亮度</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">fade:给颜色设置一定数值的透明度</p>\n<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; word-break: break-word; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">mix:根据比例混合两种颜色</p>\n<p><a title=\"https://www.jianshu.com/p/868d1bcbe12a\" href=\"https://www.jianshu.com/p/868d1bcbe12a\" target=\"_blank\" rel=\"noopener\">参考文档https://www.jianshu.com/p/868d1bcbe12a</a></p>"},{"id":3,"body":"Ios WebView下拉空白"},{"id":4,"body":"<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1. 字体引用;</h1>\n<p>在<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">body</code>里引入字体包<span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">：</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">@font-face{<br />   font-family:'oswald';<br />   src:url('..//fonts/oswald.regular.ttf')<br />}</span></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">引入这个字体</span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">：</span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">.fontFail{<br />   font-family:'oswald';<br />}</span></pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2. 字体填充颜色;</h1>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">改变字体颜色的同时可以实现渐变：</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">.fontFail{<br />   background:</span>linear-gradient(to right, red, blue);<br /><span style=\"white-space: pre-wrap;\">   </span>-webkit-background-clip:text;<br /><span style=\"white-space: pre-wrap;\">   color:</span>transparent;<span style=\"white-space: pre-wrap;\"><br /></span><span style=\"white-space: pre-wrap;\">}</span></pre>\n<p>&nbsp;</p>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-3.&nbsp;超出部分显示省略号;</h1>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">.fontFail{<br />   </span><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">overflow: hidden;\n   ext-overflow:ellipsis;\n   white-space: nowrap;</span></span><span style=\"white-space: pre-wrap;\"><br /></span><span style=\"white-space: pre-wrap;\">}</span></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\">在</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">body</code><span style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\">里引入字体包</span>：</span></p>"}],"js":[{"id":1,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组排序</h1>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\">1、桶排序（桶中出现的数组元素都做个标记1，然后将桶数组中有1标记的元素依次打印）</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">//简单, 但是不用,浪费内存\nvar arr2=[];\nfor(var i=0;i&lt;arr.length;i++){\n    var key=arr[i];\n    arr2[key]=1;\n}\nfor(var j in arr2){\n    console.log(j);\n}</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">2、冒泡排序（每一趟找出最大的）</span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">//性能一般\nvar arr=[1,5,7,9,16,2,4];\n//冒泡排序,每一趟找出最大的,总共比较次数为arr.length-1次,每次的比较次数为arr.length-1次，依次递减\nvar temp;\nfor(var i=0;i&lt;arr.length-1;i++){\n    for(var j=0;j&lt;arr.length-1;j++){\n        if(arr[j]&gt;arr[j+1]){\n            temp=arr[j];\n            arr[j]=arr[j+1];\n            arr[j+1]=temp;\n        }\n    }\n}</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">3、选择排序（假定某个位置的值是最小值）</span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">//性能一般\nvar arr=[1,23,5,8,11,78,45];\nvar temp;\nfor(var i=0;i&lt;arr.length-1;i++){\n    for(var j=i+1;j&lt;arr.length;j++){\n        if(arr[i]&gt;arr[j]){\n            temp=arr[i];\n            arr[i]=arr[j];\n            arr[j]=temp;\n        }\n    }\n}</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">4、快速排序（一拆为二）</span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">function quickSort(arr){\n    if(arr.length &lt;= 1){\n        return arr;\n    }\n    var left = [];\n    var right = [];\n    var midIndex = parseInt(arr.length / 2);\n    var mid = arr[midIndex];\n    for(var i = 0 ; i &lt; arr.length ; i++){\n        if(i == midIndex) continue;\n        if( arr[i] &lt; mid){\n            left.push(arr[i])\n        }else{\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([mid],quickSort(right));\n}\n \n[1,2].concat([3],[4,5]);   //[1, 2, 3, 4, 5]</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">5、插入排序</span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">var arr=[45,1,32,21,56,87,43,12,34,45];\n    for(var i=0;i&lt;arr.length;i++){\n    var n=i;\n    while(arr[n]&gt;arr[n+1] &amp;&amp; n&gt;=0){\n \t    var temp=arr[n];\n\t    arr[n]=arr[n+1];\n \t    arr[n+1]=temp;\n\t    n--;\n    }\n}</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">6、希尔排序（性能最好的排序）</span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">function xier(arr){\n    var interval = parseInt(arr.length / 2);  //分组间隔设置\n    while(interval &gt; 0){\n        for(var i = 0 ; i &lt; arr.length ; i ++){\n            var n = i;\n            while(arr[n] &lt; arr[n - interval] &amp;&amp; n &gt; 0){\n                var temp = arr[n];\n                arr[n] = arr[n - interval];\n                arr[n - interval] = temp;\n                n = n - interval;\n            }\n        }\n        interval = parseInt(interval / 2);\n    }\n    return arr;\n}\nxier([12,9,38,44,7,98,35,59,49,88,38]);</code></pre>\n<p><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: bold; overflow-wrap: break-word; color: #4d4d4d; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\"><span style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; overflow-wrap: break-word;\">7、sort排序</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">//一维数组排序\nvar arr=[1,5,7,9,16,2,4];\narr.sort(function(a,b){\n    return b-a;  //降序排列，return a-b; &mdash;&gt;升序排列\n})  //括号里不写回调函数，则默认按照字母逐位升序排列，结果为[1,16,2,4,5,7,9]</code></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">//对象数组排序\nvar arr = [\n    {name:'syy',age:0},\n    {name:'wxy',age:18},\n    {name:'slj',age:8},\n    {name:'wj',age:20}\n];\n \nfunction compare(property){\n    return function(a,b){\n        var value1 = a[property];\n        var value2 = b[property];\n        return value1 - value2;//升序,降序为value2 - value1\n    }\n}\narr.sort(compare('age'))</code></pre>"},{"id":3,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">ES6类（Class）基本用法</h1>\n<p><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">JavaScript</span></span><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">语言的传统方法是通过构造函数,定义并生成新对象,</span></span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">prototype</span></span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">&nbsp;属性使您有能力向对象添加属性和方法。下面是通过传统的方式创建和使用对象的案例:</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Person.js  \nfunction Person(x,y){  \n    this.x = x;  \n    this.y = y;  \n}  \n  \nPerson.prototype.toString = function (){  \n    return (this.x + \"的年龄是\" +this.y+\"岁\");  \n}  \nexport {Person};  \n//index.js  \nimport {Person} from './Person';  \nlet person = new Person('张三',12);  \nconsole.log(person.toString());&lt;/span&gt;</code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">ES6引入了</span></span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Class</span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">（类）这个概念,作为对象的模板,通过</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Class</span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">关键字,可以定义类。基本上,ES6的</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Class</span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">可以看作只是一个语法糖,它的绝大部分功能,ES5都可以做到,新的</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Class</span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的&ldquo;类&rdquo;改写,就是下面这样。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Person.js  \nclass Person{  \n    // 构造  \n    constructor(x,y){  \n        this.x = x;  \n        this.y = y;  \n    }  \n    toString(){  \n        return (this.x + \"的年龄是\" +this.y+\"岁\");  \n    }  \n}  \nexport {Person};  \n//index.js  \nimport {Person} from './Person';  \nlet person = new Person('张三',12);  \nconsole.log(person.toString());&lt;/span&gt;  </code></pre>\n<p style=\"text-align: left;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">上面代码定义了一个&ldquo;类&rdquo;,可以看到里面有一个</span></span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">constructor</span></span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">方法,这就是构造方法,而this关键字则代表实例对象。也就是说,ES5的构造函数</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">Person</span></span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">,对应ES6的</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Person</span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">类的构造方法。</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">Person</span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">类除了构造方法,还定义了一个</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">toString</span></span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">方法。注意,定义&ldquo;类&rdquo;的方法的时候,前面不需要加上</span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">function</span></span><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">这个关键字,直接把函数定义放进去了就可以了。另外,方法之间不需要逗号分隔。</span></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">ES6的类,完全可以看作构造函数的另一种写法。</span></span></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Person.js  \nconsole.log(typeof Person);//function  \nconsole.log(Person === Person.prototype.constructor);//true&lt;/span&gt;  </code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">上面代码表明,类的数据类型就是函数,类本身就指向构造函数。</span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Person.js  \nconsole.log(Person.prototype);//输出的是一个对象&lt;/span&gt;  </code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">构造函数的</span></span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">prototype</code></strong></span></strong></span></strong></span></strong></span></strong></strong></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">属性,在ES6的&ldquo;类&rdquo;上面继续存在。事实上,类的所有方法都定义在类的</span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">prototype</code></strong></span></strong></span></strong></span></strong></span></strong></strong></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">属性上面,通过以下方式可是覆盖类中的方法,当然定义类的时候也可以通过这个方式添加方法。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//index.js  \nPerson.prototype = {  \n    getName(){  \n        return '张三';  \n    },  \n    getAge(){  \n        return '12';  \n    }  \n};&lt;/span&gt;  </code></pre>\n<p><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">Object.assign</span></span><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">方法可以给对象</span></span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">Person</code></strong></span></strong></span></strong></span></strong></span></strong></strong></strong><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">动态的增加方法,而</span></span><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 16.2px;\">Person.prototype = {}</span></span><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Person.prototype = {}是覆盖对象的方法,或者在初始化的时候添加方法。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//index.js  \nObject.assign(Person.prototype,{  \n    getWidth(){  \n        console.log('12');  \n    },  \n    getHeight(){  \n        console.log('24');  \n    }  \n});  \nconsole.log(Person.prototype);&lt;/span&gt;  </code></pre>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">toString</code></strong></span></strong></span></strong></span></strong></span></strong></strong></strong><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">方法是</span></strong></span></strong></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">Person</code></strong></span></strong></span></strong></span></strong></span></strong></strong></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">类内部定义的方法，ES6中它是不可枚举的,这一点与ES5的行为不一致,ES5是可以枚举的。</span></strong></span></strong></strong></strong></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//index.js  \n//ES5  \nconsole.log(Object.keys(Person.prototype));//[\"toString\", \"getWidth\", \"getHeight\"]  \nconsole.log(Object.getOwnPropertyNames(Person.prototype));//[\"constructor\", \"toString\", \"getWidth\", \"getHeight\"]  \n  \n//ES6  \nconsole.log(Object.keys(Person.prototype));//[\"getWidth\", \"getHeight\"]  \nconsole.log(Object.getOwnPropertyNames(Person.prototype));//[\"constructor\", \"toString\", \"getWidth\", \"getHeight\"]&lt;/span&gt;  </code></pre>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">Object.keys（obj）</code></strong></span></strong></span></strong>，返回一个数组，数组里是该obj可被枚举的所有属性。</span></strong></span></strong></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">Object.getOwnPropertyNames(obj)</code></strong></span></strong></span></strong></span></strong></span></strong></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><strong><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">，返回一个数组，数组里是该obj上所有的实例属性。</span></strong></span></strong></strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">在ES6中,类的属性名可以使用表达式,具体实现方式如下</span></strong></span></strong></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Article.js  \nlet methodName = \"getTitle\";  \nexport default class Article{  \n    [methodName](){  \n        console.log('输出文章的标题1');  \n    }  \n}  \n//index.js  \nimport Article from './Article';  \n//console.log(Article.prototype);  \nlet article = new Article();  \narticle.getTitle()&lt;/span&gt;  </code></pre>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong>方法是类的构造函数是默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个默认的constructor方法会被添加。所以即使你没有添加构造函数,也是有默认的构造函数的。一般<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong></span></strong></span></strong>方法默认返回实例对象</span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">this</code></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">，但是也可以指定<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong></span></strong></span></strong>方法返回一个全新的对象,让返回的实例对象不是该类的实例。</span></strong></span></strong></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//ConstructorStu.js  \nimport Article from './Article';  \nexport default class ConstructorStu{  \n    // 构造  \n    constructor() {  \n        console.log('constructor');  \n        return new Article();  \n    }  \n}  \n//index.js  \nimport ConstructorStu from './ConstructorStu';  \nconsole.log('==111==');  \nconsole.log(new ConstructorStu() instanceof ConstructorStu);//false  \nconsole.log('==222==');  \nlet cons =  new ConstructorStu();  \nconsole.log('==333==');  \ncons.constructor();  \nconsole.log('==444==');  \n运行结果  \n==111==  \nconstructor  \nfalse  \n==222==  \nconstructor  \n==333==  \n==444==&lt;/span&gt;</code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">说明:类的构造函数，不使用</span></span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">new</code></strong></span></strong></span></strong><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">是没法调用的,即使你使用实例对象去调用也是不行的,这是它跟普通构造函数的一个主要区别。</span></span><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">实例的属性除非显式定义在其本身（即定义在</span></span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">this</code></strong></span></strong></span></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">对象上），否则都是定义在原型上（即定义在</span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">class</code></strong></span></strong></span></strong><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">上)。</span></span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">hasOwnProperty()</code></strong></span></strong></span></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">函数用于指示一个对象自身(不包括原型链)是否具有指定名称的属性。如果有，返回</span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">true</code></strong></span></strong></span></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">，否则返回</span><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">false</code></strong></span></strong></span></strong><span style=\"font-size: 18px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\">。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Article.js  \nlet methodName = \"getTitle\";  \nexport default class Article{  \n    [methodName](){  \n        console.log('输出文章的标题1');  \n    }  \n}  \n//index.js  \nimport Article from './Article';  \n//console.log(Article.prototype);  \nlet article = new Article();  \narticle.getTitle()&lt;/span&gt;  </code></pre>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong>方法是类的构造函数是默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个默认的constructor方法会被添加。所以即使你没有添加构造函数,也是有默认的构造函数的。一般<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong></span></strong></span></strong>方法默认返回实例对象</span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">this</code></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">，但是也可以指定<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">constructor</code></strong></span></strong></span></strong>方法返回一个全新的对象,让返回的实例对象不是该类的实例。</span></strong></span></strong></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//Person.js  \nclass Person{  \n    // 构造  \n    constructor(x,y){  \n        this.x = x;  \n        this.y = y;  \n    }  \n  \n    toString(){  \n        return (this.x + \"的年龄是\" +this.y+\"岁\");  \n    }  \n}  \n  \nlet person = new Person('lis',8);  \nconsole.log(person.toString());  \nconsole.log(person.hasOwnProperty('x'));//true  \nconsole.log(person.hasOwnProperty('y'));//true  \nconsole.log(person.hasOwnProperty('toString'));//false  \nconsole.log(person.__proto__.hasOwnProperty('toString'));//true&lt;/span&gt;   </code></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">说明:上面结果说明对象上有</span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">x</code></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">,</span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">y</code></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">属性,但是没有</span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">toString</code></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">属性。也就是说<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">x</code></strong></span></strong></span></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">,<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">y</code></strong></span></strong></span></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">是定义在<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">this</code></strong></span></strong></span></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">对象上,<strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><code style=\"font-weight: 400; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">toString</code></strong></span></strong></span></strong></span></strong></span></strong><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\"><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400;\">定义在类上。<br /><br /></span></strong></span></strong></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;let person1 = new Person('张三',12);  \nlet person2 = new Person('李四',13);  \nconsole.log(person1.__proto__ === person2.__proto__);//true&lt;/span&gt; </code></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px; white-space: normal;\">类的所有实例共享一个原型对象,person1和person2都是Person的实例,它们的原型都是Person.prototype，所以__proto__属性是相等的。这也意味着，可以通过实例的__proto__属性为Class添加方法<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;let person1 = new Person('张三',12);  \nlet person2 = new Person('李四',13);  \nperson1.__proto__.getH = function (){  \n    return \"Height\";  \n};  \nconsole.log(person1.getH());  \nconsole.log(person2.getH());&lt;/span&gt;</code></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px; white-space: normal;\"><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px; white-space: normal;\">上面代码在person1的原型上添加了一个getH方法，由于person1的原型就是person2的原型，因此person2也可以调用这个方法。而且，此后新建的实例person3也可以调用这个方法。这意味着，使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变Class的原始定义，影响到所有实例。<br /><br />class不存在变量提升,需要先定义再使用,因为ES6不会把类的声明提升到代码头部,但是ES5就不一样,ES5存在变量提升,可以先使用,然后再定义。<br /><br /></span></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;span style=\"font-size:18px;\"&gt;//正确  \nnew A();  \nfunction A(){  \n  \n}//ES5可以先使用再定义,存在变量提升  \n//错误  \nnew B();  \nclass B{  \n  \n}//B is not a constructor  \n//ES6不能先使用再定义,不存在变量提升&lt;/span&gt;  </code></pre>\n<p><a title=\"https://www.cnblogs.com/yuwenjing0727/p/7872616.html\" href=\"https://www.cnblogs.com/yuwenjing0727/p/7872616.html\" target=\"_blank\" rel=\"noopener\">参考文档https://www.cnblogs.com/yuwenjing0727/p/7872616.html</a></p>"},{"id":4,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">异步操作Promise</h1>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise 对象有以下两个特点。</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">var promise = new Promise(function(resolve, reject) {\n if (/* 异步操作成功 */){\n resolve(value);\n } else {\n reject(error);\n }\n});\n\npromise.then(function(value) {\n // success\n}, function(value) {\n // failure\n});</code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 方法和 reject 方法。</span></span></p>\n<p>&nbsp;</p>\n<h2 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">基本的 api</h2>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.resolve()</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.reject()</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.prototype.then()</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.prototype.catch()</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.all() // 所有的完成</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">Promise.race() // 竞速，完成一个即可</span></span></p>\n<p>&nbsp;</p>\n<h2 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">进阶</h2>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">1. 封装同步与异步代码</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">```\nnew Promise(function (resolve, reject) {\nresolve(someValue);\n});\n```\n写成\n\n```\nPromise.resolve(someValue);\n```</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">2. 捕获同步异常</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\"> new Promise(function (resolve, reject) {\n throw new Error('悲剧了，又出 bug 了');\n }).catch(function(err){\n console.log(err);\n });</code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">如果是同步代码，可以写成</span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">Promise.reject(new Error(\"什么鬼\"));</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">3. 多个异常捕获，更加精准的捕获</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">somePromise.then(function() {\n return a.b.c.d();\n}).catch(TypeError, function(e) {\n //If a is defined, will end up here because\n //it is a type error to reference property of undefined\n}).catch(ReferenceError, function(e) {\n //Will end up here if a wasn't defined at all\n}).catch(function(e) {\n //Generic catch-the rest, error wasn't TypeError nor\n //ReferenceError\n});</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">4. 获取两个 Promise 的返回值</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">1. .then 方式顺序调用\n2. 设定更高层的作用域\n3. spread</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">5. finally</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">任何情况下都会执行的，一般写在 catch 之后</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">6. bind</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">somethingAsync().bind({})\n.spread(function (aValue, bValue) {\n this.aValue = aValue;\n this.bValue = bValue;\n return somethingElseAsync(aValue, bValue);\n})\n.then(function (cValue) {\n    return this.aValue + this.bValue + cValue;\n});</code></pre>\n<p><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">如果是同步代码，可以写成</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">var scope = {};\nsomethingAsync()\n.spread(function (aValue, bValue) {\n scope.aValue = aValue;\n scope.bValue = bValue;\n return somethingElseAsync(aValue, bValue);\n})\n.then(function (cValue) {\n return scope.aValue + scope.bValue + cValue;\n});</code></pre>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">然而，这有非常多的区别，</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">你必须先声明，有浪费资源和内存泄露的风险</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">不能用于放在一个表达式的上下文中</span></span></p>\n<p><span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px;\">效率更低</span></span></p>\n<p>&nbsp;</p>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">7. all。非常用于于处理一个动态大小均匀的 Promise 列表</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">var p = Promise.all([p1,p2,p3]);</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">8. join。非常适用于处理多个分离的 Promise</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">```\nvar join = Promise.join;\njoin(getPictures(), getComments(), getTweets(),\nfunction(pictures, comments, tweets) {\nconsole.log(\"in total: \" + pictures.length + comments.length + tweets.length);\n});\n```</code></pre>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">9. props。处理一个 promise 的 map 集合。只有有一个失败，所有的执行都结束</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">```\nPromise.props({\npictures: getPictures(),\ncomments: getComments(),\ntweets: getTweets()\n}).then(function(result) {\nconsole.log(result.tweets, result.pictures, result.comments);\n});\n```</code></pre>\n<p><a title=\"https://www.jianshu.com/p/063f7e490e9a\" href=\"https://www.jianshu.com/p/063f7e490e9a\" target=\"_blank\" rel=\"noopener\">参考文档https://www.jianshu.com/p/063f7e490e9a</a></p>\n<p><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"></code></p>"},{"id":5,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">JS常用模版引擎</h1>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">1.&nbsp; Mustache</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script src=\"../dist/template.js\"&gt;&lt;/script&gt; <br /><br />&lt;script id=\"Mustache\" type=\"text/tmpl\"&gt;  \n   &lt;ul&gt;  \n     {{#list}}  \n\t&lt;li&gt;{{{index}}}. 用户: {{{user}}}/ 网站：{{{site}}}&lt;/li&gt;  \n     {{/list}}  \n   &lt;/ul&gt;  \n &lt;/script&gt; <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('Mustache', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">2.&nbsp; dot</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script src=\"../dist/template.js\"&gt;&lt;/script&gt; <br /><br />&lt;script id=\"doT\" type=\"text/tmpl\"&gt;  \n     &lt;ul&gt;  \n         {{ for (var val, i = 0, l = it.list.length; i &lt; l; i ++) { }}  \n             {{ val = it.list; }}  \n             &lt;li&gt;{{=val[i].index}}. 用户: {{=val[i].user}}/ 网站：{{=val[i].site}}&lt;/li&gt;  \n         {{ } }}  \n     &lt;/ul&gt;  \n &lt;/script&gt;  <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('doT', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">3.&nbsp; juicer</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script src=\"../dist/template.js\"&gt;&lt;/script&gt; <br /><br />&lt;script id=\"juicer\" type=\"text/tmpl\"&gt;  \n     &lt;ul&gt;  \n         {@each list as val}  \n             &lt;li&gt;val.index.用户:{val.user}/ 网站：$${val.site}&lt;/li&gt;  \n         {@/each}  \n     &lt;/ul&gt;  \n &lt;/script&gt;  <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('juicer', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">4.&nbsp; artTemplate</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script id=\"template\" type=\"text/tmpl\"&gt;  \n     &lt;ul&gt;  \n         &lt;% for (i = 0, l = list.length; i &lt; l; i ++) { %&gt;  \n             &lt;li&gt;&lt;%=list[i].index%&gt;. 用户: &lt;%=list[i].user%&gt;/ 网站：&lt;%=list[i].site%&gt;&lt;/li&gt;  \n         &lt;% } %&gt;  \n     &lt;/ul&gt;  \n&lt;/script&gt;   <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('template', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">5.&nbsp; underscore</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script src=\"../dist/template.js\"&gt;&lt;/script&gt; <br /><br />&lt;script id=\"underscoreTemplate\" type=\"text/tmpl\"&gt;  \n     &lt;ul&gt;  \n         &lt;% for (var i = 0, l = list.length; i &lt; l; i ++) { %&gt;  \n             &lt;li&gt;&lt;%=list[i].index%&gt;. 用户: &lt;%=list[i].user%&gt;/ 网站：&lt;%=list[i].site%&gt;&lt;/li&gt;  \n         &lt;% } %&gt;  \n     &lt;/ul&gt;  \n&lt;/script&gt;  <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('underscoreTemplate', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>\n<h4 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">6.&nbsp; Handlebars</h4>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">&lt;script src=\"../dist/template.js\"&gt;&lt;/script&gt; <br /><br />&lt;script id=\"Handlebars\" type=\"text/tmpl\"&gt;  \n     &lt;ul&gt;  \n         {{#list}}  \n             &lt;li&gt;{{{index}}}. 用户: {{{user}}}/ 网站：{{{site}}}&lt;/li&gt;  \n         {{/list}}  \n     &lt;/ul&gt;  \n&lt;/script&gt;  <br /><br />&lt;script&gt;\nvar data = {\n title: '嵌入子模板',\n list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\n};\nvar html = template('Handlebars', data);<br />document.getElementById('content').innerHTML = html;\n&lt;/script&gt;</code></pre>"},{"id":2,"body":"<h2 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">ES7新特性（ECMAScript 2016）</h2>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Array.prototype.includes()方法</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">var array = [1, 2, 3];\n\nconsole.log(array.includes(2));\n// expected output: true\n\nvar pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// expected output: true\n\nconsole.log(pets.includes('at'));\n// expected output: false</code></pre>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Array.prototype.includes()方法接收两个参数：(</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">要搜索的值,</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">搜索的开始索引</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">当第二个参数被传入时，该方法会从索引处开始往后搜索（默认索引值为0）。若搜索值在数组中存在则返回true，否则返回false。 且看下面示例：</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">['a', 'b', 'c', 'd'].includes('b')         // true\n['a', 'b', 'c', 'd'].includes('b', 1)      // true\n['a', 'b', 'c', 'd'].includes('b', 2)      // false</code></pre>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">求幂运算符（**）</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">加/减法我们通常都是用其中缀形式，直观易懂。在ECMAScript2016中，我们可以使用</span><code style=\"box-sizing: border-box; font-size: 12px; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; padding: 2px 4px; border: none; vertical-align: middle; white-space: pre-wrap; color: #c7254e; background-color: #f2f2f2;\">**</code><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">来替代Math.pow。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">4 ** 3           // 64<br />效果等同于\nMath.pow(4,3)<br />值得一提的是，作为中缀运算符，**还支持以下操作\nlet n = 4;\nn **= 3;\n// 64</code></pre>\n<h2 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">ES8新特性（ECMAScript 2017）</h2>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">异步函数Async Functions</h3>\n<div>\n<div>Async Functions也就是我们常说的Async/Await，相信大家对于这个概念都已经不陌生了。Async/Await是一种用于处理JS异步操作的语法糖，可以帮助我们摆脱回调地狱，编写更加优雅的代码。</div>\n<div>&nbsp;</div>\n<div>\n<div>通俗的理解，async关键字的作用是告诉编译器对于标定的函数要区别对待。当编译器遇到标定的函数中的await关键字时，要暂时停止运行，带到await标定的函数处理完毕后，再进行相应操作。如果该函数fulfiled了，则返回值是fulfillment value，否则得到的就是reject value。</div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">async function asyncFunc() {\n    const result = await otherAsyncFunc();\n    console.log(result);\n}\n\n// Equivalent to:\nfunction asyncFunc() {\n    return otherAsyncFunc()\n    .then(result =&gt; {\n        console.log(result);\n    });\n}</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">按顺序处理多个异步函数的时候优势更为明显：</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">async function asyncFunc() {\n    const result1 = await otherAsyncFunc1();\n    console.log(result1);\n    const result2 = await otherAsyncFunc2();\n    console.log(result2);\n}\n\n// Equivalent to:\nfunction asyncFunc() {\n    return otherAsyncFunc1()\n    .then(result1 =&gt; {\n        console.log(result1);\n        return otherAsyncFunc2();\n    })\n    .then(result2 =&gt; {\n        console.log(result2);\n    });\n}</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">并行处理多个异步函数：</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">async function asyncFunc() {\n    const [result1, result2] = await Promise.all([\n        otherAsyncFunc1(),\n        otherAsyncFunc2(),\n    ]);\n    console.log(result1, result2);\n}\n\n// Equivalent to:\nfunction asyncFunc() {\n    return Promise.all([\n        otherAsyncFunc1(),\n        otherAsyncFunc2(),\n    ])\n    .then([result1, result2] =&gt; {\n        console.log(result1, result2);\n    });\n}</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">处理错误：</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">async function asyncFunc() {\n    try {\n        await otherAsyncFunc();\n    } catch (err) {\n        console.error(err);\n    }\n}\n\n// Equivalent to:\nfunction asyncFunc() {\n    return otherAsyncFunc()\n    .catch(err =&gt; {\n        console.error(err);\n    });\n}</code></pre>\n</div>\n<div>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">SharedArrayBuffer和Atomics</h3>\n</div>\n<div>\n<div>共享阵列缓冲区是更高并发抽象的基本构建块。它们允许您在多个 workers 和主线程之间共享 SharedArrayBuffer 对象的字节(该缓冲区是共享的，用于访问字节，将其封装在一个 TypedArray 中)这种共享有两个好处：</div>\n<div>&nbsp;</div>\n<span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">你可以更快地在 workers 之间共享数据。</span></div>\n<div><br style=\"box-sizing: border-box; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\" /><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">workers 之间的协调变得更简单和更快（与 postMessage() 相比）。</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">// main.js\nconst worker = new Worker('worker.js');\n\n// 要分享的buffer\nconst sharedBuffer = new SharedArrayBuffer( // (A)\n    10 * Int32Array.BYTES_PER_ELEMENT); // 10 elements\n\n// 使用Worker共用sharedBuffer\nworker.postMessage({sharedBuffer}); // clone\n\n// 仅限本地使用\nconst sharedArray = new Int32Array(sharedBuffer); // (B)</code></pre>\n</div>\n<div>\n<div>创建一个共享数组缓冲区（Shared Array Buffers）的方法与创建普通的数组缓冲区(Array Buffer)类似：通过调用构造函数，并以字节的形式指定缓冲区的大小(行A)。你与 workers 共享的是 缓冲区（buffer） 。对于你自己的本地使用，你通常将共享数组缓冲区封装在 TypedArray 中。</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">workers的实现如下所列。</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">// worker.js\nself.addEventListener('message', function (event) {\n    const {sharedBuffer} = event.data;\n    const sharedArray = new Int32Array(sharedBuffer); // (A)\n    // &middot;&middot;&middot;\n});</code></pre>\n</div>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">sharedArrayBuffer 的 API</h4>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">构造函数：</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">new SharedArrayBuffer(length)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">创建一个 length 字节的 buffer(缓冲区)。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">静态属性：</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">get SharedArrayBuffer[Symbol.species]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">默认情况下返回 this。 覆盖以控制 slice() 的返回。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">实例属性：</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">get SharedArrayBuffer.prototype.byteLength()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">返回 buffer(缓冲区) 的字节长度。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">SharedArrayBuffer.prototype.slice(start, end)&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">创建一个新的 this.constructor[Symbol.species] 实例，并用字节填充从（包括）开始到（不包括）结束的索引。</span></p>\n</div>\n<div>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Atomics: 安全访问共享数据</h4>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">// main.js\nsharedArray[1] = 11;\nsharedArray[2] = 22;</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">在单线程中，您可以重新排列这些写入操作，因为在中间没有读到任何内容。 对于多线程，当你期望以特定顺序执行写入操作时，就会遇到麻烦：</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">// worker.js\nwhile (sharedArray[2] !== 22) ;\nconsole.log(sharedArray[1]); // 0 or 11</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Atomics 方法可以用来与其他 workers 进行同步。例如，以下两个操作可以让你读取和写入数据，并且不会被编译器重新排列：</span></div>\n<div>&nbsp;</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Atomics.load(ta : TypedArray, index)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Atomics.store(ta : TypedArray, index, value : T)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">这个想法是使用常规操作读取和写入大多数数据，而 Atomics 操作（load ，store 和其他操作）可确保读取和写入安全。通常，您将使用自定义同步机制，例如锁，其实现基于Atomics。</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">// main.js\nconsole.log('notifying...');\nAtomics.store(sharedArray, 0, 123);\n\n// worker.js\nwhile (Atomics.load(sharedArray, 0) !== 123) ;\nconsole.log('notified');</code></pre>\n</div>\n<div>\n<h4 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Atomics 的 API</h4>\n<div>\n<div>Atomic 函数的主要操作数必须是 Int8Array ，Uint8Array ，Int16Array ，Uint16Array ，Int32Array 或 Uint32Array 的一个实例。它必须包裹一个 SharedArrayBuffer 。</div>\n<div>&nbsp;</div>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">所有函数都以 atomically 方式进行操作。存储操作的顺序是固定的并且不能由编译器或 CPU 重新排序。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">加载和存储：</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.load(ta : TypedArray&lt;T&gt;, index) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">读取和返回 ta[index] 上的元素，返回数组指定位置上的值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.store(ta : TypedArray&lt;T&gt;, index, value : T) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">在 ta[index] 上写入 value，并且返回 value。&nbsp; &nbsp; &nbsp;&nbsp;</span></div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp;&nbsp;</span></div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.exchange(ta : TypedArray&lt;T&gt;, index, value : T) : T&nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">将 ta[index] 上的元素设置为 value ，并且返回索引 index 原先的值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.compareExchange(ta : TypedArray&lt;T&gt;, index, expectedValue, replacementValue) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">如果 ta[index] 上的当前元素为 expectedValue , 那么使用 replacementValue 替换。并且返回索引 index 原先（或者未改变）的值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">简单修改 TypeArray 元素：Atomics.add(ta : TypedArray&lt;T&gt;, index, value) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;执行 ta[index] += value 并返回 ta[index] 的原始值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.sub(ta : TypedArray&lt;T&gt;, index, value) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">执行 ta[index] -= value 并返回 ta[index] 的原始值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.and(ta : TypedArray&lt;T&gt;, index, value) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">执行 ta[index] &amp;= value 并返回 ta[index] 的原始值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.or(ta : TypedArray&lt;T&gt;, index, value) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">执行 ta[index] |= value 并返回 ta[index] 的原始值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.xor(ta : TypedArray&lt;T&gt;, index, value) : T&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">执行 ta[index] ^= value 并返回 ta[index] 的原始值。</span></div>\n<div>&nbsp;</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">等待和唤醒：&nbsp;</span>Atomics.wait(ta: Int32Array, index, value, timeout=Number.POSITIVE_INFINITY) : ('not-equal' | 'ok' | 'timed-out') &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;如果 ta[index] 的当前值不是 value ，则返回 'not-equal'。否则继续等待，直到我们通过 Atomics.wake() 唤醒或直到等待超时。 在前一种情况下，返回 'ok'。在后一种情况下，返回'timed-out'。timeout 以毫秒为单位。记住此函数执行的操作：&ldquo;如果 ta[index] 为 value，那么继续等待&rdquo; 。</div>\n<div>&nbsp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Atomics.wake(ta : Int32Array, index, count)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span><span style=\"background-color: #ffffff; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">唤醒等待在 ta[index] 上的 count workers。</span></div>\n<div>&nbsp;</div>\n<div>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Object.values and Object.entries</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Object.values() 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for...in循环的顺序相同 ( 区别在于for-in循环枚举原型链中的属性 )。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">obj参数是需要待操作的对象。可以是一个对象，或者一个数组（是一个带有数字下标的对象，[10,20,30] -&gt; {0: 10,1: 20,2: 30})。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const obj = { x: 'xxx', y: 1 };\nObject.values(obj); // ['xxx', 1]\n\nconst obj = ['e', 's', '8']; // 相当于 { 0: 'e', 1: 's', 2: '8' };\nObject.values(obj); // ['e', 's', '8']\n\n// 当我们使用数字键值时，返回的是数字排序\n// 根据键值排序\nconst obj = { 10: 'xxx', 1: 'yyy', 3: 'zzz' };\nObject.values(obj); // ['yyy', 'zzz', 'xxx']\n\nObject.values('es8'); // ['e', 's', '8']</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">Object.entries 方法返回一个给定对象自身可遍历属性 [key, value] 的数组， 排序规则和 Object.values 一样。这个方法的声明比较琐碎:</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const obj = { x: 'xxx', y: 1 };\nObject.entries(obj); // [['x', 'xxx'], ['y', 1]]\n\nconst obj = ['e', 's', '8'];\nObject.entries(obj); // [['0', 'e'], ['1', 's'], ['2', '8']]\n\nconst obj = { 10: 'xxx', 1: 'yyy', 3: 'zzz' };\nObject.entries(obj); // [['1', 'yyy'], ['3', 'zzz'], ['10': 'xxx']]\n\nObject.entries('es8'); // [['0', 'e'], ['1', 's'], ['2', '8']]</code></pre>\n</div>\n<div>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">String padding</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">为 String 对象增加了 2 个函数：padStart 和 padEnd。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">像它们名字那样，这几个函数的主要目的就是填补字符串的首部和尾部，为了使得到的结果字符串的长度能达到给定的长度。你可以通过特定的字符，或者字符串，或者默认的空格填充它。下面是函数的声明：</span></p>\n<p>&nbsp;</p>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">str.padStart(targetLength [, padString])\nstr.padEnd(targetLength [, padString])</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">这些函数的第一个参数是 targetLength（目标长度），这个是结果字符串的长度。第二个参数是可选的 padString（填充字符），一个用于填充到源字符串的字符串。默认值是空格。</span></div>\n</div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">'es8'.padStart(2);          // 'es8'\n'es8'.padStart(5);          // '  es8'\n'es8'.padStart(6, 'woof');  // 'wooes8'\n'es8'.padStart(14, 'wow');  // 'wowwowwowwoes8'\n'es8'.padStart(7, '0');     // '0000es8'\n\n'es8'.padEnd(2);            // 'es8'\n'es8'.padEnd(5);            // 'es8  '\n'es8'.padEnd(6, 'woof');    // 'es8woo'\n'es8'.padEnd(14, 'wow');    // 'es8wowwowwowwo'\n'es8'.padEnd(7, '6');       // 'es86666'</code></pre>\n</div>\n<div>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Object.getOwnPropertyDescriptors</h3>\n<div>\n<div>getOwnPropertyDescriptors 方法返回指定对象所有自身属性的描述对象。属性描述对象是直接在对象上定义的，而不是继承于对象的原型。ES2017加入这个函数的主要动机在于方便将一个对象深度拷贝给另一个对象，同时可以将getter/setter拷贝。声明如下：</div>\n<div>&nbsp;</div>\n</div>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">Object.getOwnPropertyDescriptors(obj)</code></pre>\n</div>\n<div><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">obj 是待操作对象。返回的描述对象键值有：configurable, enumerable, writable, get, set and value。</span></div>\n<div>&nbsp;</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const obj = { \n  get es7() { return 777; },\n  get es8() { return 888; }\n};\nObject.getOwnPropertyDescriptor(obj);\n// {\n//   es7: {\n//     configurable: true,\n//     enumerable: true,\n//     get: function es7(){}, //the getter function\n//     set: undefined\n//   },\n//   es8: {\n//     configurable: true,\n//     enumerable: true,\n//     get: function es8(){}, //the getter function\n//     set: undefined\n//   }\n// }</code></pre>\n</div>\n<div>\n<h2 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">ES9新特性（ECMAScript 2018）</h2>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">异步迭代（Domenic Denicola，Kevin Smith）</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">异步迭代器和常规迭代器的工作方式非常相似，但是异步迭代器涉及promise:</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">async function example() {\n  // 普通迭代器:\n  const iterator = createNumberIterator();\n  iterator.next(); // Object {value: 1, done: false}\n  iterator.next(); // Object {value: 2, done: false}\n  iterator.next(); // Object {value: 3, done: false}\n  iterator.next(); // Object {value: undefined, done: true}\n\n  // 异步迭代器:\n  const asyncIterator = createAsyncNumberIterator();\n  const p = asyncIterator.next(); // Promise\n  await p;// Object {value: 1, done: false}\n  await asyncIterator.next(); // Object {value: 2, done: false}\n  await asyncIterator.next(); // Object {value: 3, done: false}\n  await asyncIterator.next(); // Object {value: undefined, done: true}\n}</code></pre>\n<div>\n<div>异步迭代器对象的next()方法返回了一个Promise，解析后的值跟普通的迭代器类似。用法：<code>iterator.next().then(({ value, done })=&gt; {//{value: &lsquo;some val&rsquo;, done: false}}</code></div>\n<div>&nbsp;</div>\n</div>\n</div>\n<div>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const promises = [\n    new Promise(resolve =&gt; resolve(1)),\n    new Promise(resolve =&gt; resolve(2)),\n    new Promise(resolve =&gt; resolve(3)),\n];\n\nasync function test() {\n    for await (const p of promises) {\n        console.log(p);\n    }\n}\ntest(); //1 ,2 3</code></pre>\n</div>\n<div>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">Rest/Spread 属性</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">在ES9中，为对象提供了像数组一样的rest参数和扩展运算符：</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const obj = {\n  a: 1,\n  b: 2,\n  c: 3\n}\nconst { a, ...param } = obj;\n  console.log(a)     //1\n  console.log(param) //{b: 2, c: 3}\n\nfunction foo({a, ...param}) {\n  console.log(a);    //1\n  console.log(param) //{b: 2, c: 3}\n}</code></pre>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">正则表达式命名捕获组</h3>\n<p><span style=\"font-size: 16px; color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">ES9中可以通过名称来识别捕获组：</span><code style=\"background-color: #f2f2f2; padding: 2px 4px; box-sizing: border-box; font-size: 12px; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; border: none; vertical-align: middle; white-space: pre-wrap; color: #c7254e;\">(?&lt;year&gt;[0-9]{4})</code></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">在这里，我们用名称标记了前一个捕获组year。该名称必须是合法的JavaScript标识符（认为变量名称或属性名称）。匹配后，您可以通过访问捕获的字符串matchObj.groups.year来访问。</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">const RE_DATE = /(?&lt;year&gt;[0-9]{4})-(?&lt;month&gt;[0-9]{2})-(?&lt;day&gt;[0-9]{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n\n// 使用解构语法更为简便\nconst {groups: {day, year}} = RE_DATE.exec('1999-12-31');\nconsole.log(year); // 1999\nconsole.log(day); // 31</code></pre>\n<h3 style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: #404040; text-rendering: optimizelegibility; font-size: 22px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">模板字符串修改</h3>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">ES2018 移除对 ECMAScript 在带标签的模版字符串中转义序列的语法限制。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">之前，\\u开始一个 unicode 转义，\\x开始一个十六进制转义，\\后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如Windows文件路径 C:\\uuu\\xxx\\111。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #404040; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: #ffffff;\">要取消转义序列的语法限制，可在模板字符串之前使用标记函数String.raw:</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"background-color: transparent; border-radius: 0px; padding: 0px; box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; color: inherit; white-space: pre-wrap;\">`\\u{54}`\n// \"T\"\nString.raw`\\u{54}`\n// \"\\u{54}\"</code></pre>\n</div>\n<div><a title=\"https://www.jianshu.com/p/a64a6aa4cd95\" href=\"https://www.jianshu.com/p/a64a6aa4cd95\" target=\"_blank\" rel=\"noopener\">参考文档https://www.jianshu.com/p/a64a6aa4cd95</a></div>\n</div>\n</div>"},{"id":6,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组的常用方法</h1>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">对象继承方法</h1>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; background-color: #ffffff;\">【toString()】</strong></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 16.8px; font-weight: bold; background-color: #ffffff;\"><span style=\"font-size: 14px; font-weight: 400;\">toString()方法返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串</span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">[1,2,3].toString();//'1,2,3'\n['a','b','c'].toString();//'a,b,c'\n[1,[2,'c']].toString();//'1,2,c'</span><span style=\"font-size: 14px;\"><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><strong style=\"font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; color: #444444; white-space: normal; background-color: #ffffff;\">【toLocaleString()】<br /><br /></strong><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">toLocaleString()是toString()方法的本地化版本，经常返回与toString()方法相同的值，但也不总如此<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var person1 = {\n    toLocaleString: function(){\n        return 'Nikolaos';\n    },\n    toString: function(){\n        return 'Nicholas';\n    }\n};\nvar person2 = {\n    toLocaleString: function(){\n        return 'Grigorios';\n    },\n    toString: function(){\n        return 'Greg';\n    }\n};\nvar people = [person1,person2];\nconsole.log(people.toString());//'Nicholas,Greg'\nconsole.log(people.toLocaleString());//'Nikolaos,Grigorios'</span></span><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\">如果数组中的某一项的值是null或者undefined，则该值在toLocaleString()和toString()方法返回的结果中以空字符串表示<br /><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var colors = [1,undefined,2,null,3];\nconsole.log(colors.toString());//'1,,2,,3'\nconsole.log(colors.toLocaleString());//'1,,2,,3'</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff; line-height: 1.5;\">【valueOf()】<br /><br /></strong>valueOf()方法返回数组对象本身<span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1, 2, 3];\nconsole.log(a.valueOf());// [1, 2, 3]\nconsole.log(a.valueOf() instanceof Array);//true</span></span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组转换方法</h1>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【join()】<br /><br /></strong>Array.join()方法是String.split()方法的逆向操作，后者是将字符串分割成若干块来创建一个数组<br /><br />数组继承的toLocaleString()和toString()方法，在默认情况下都会以逗号分隔的字符形式返回数组项；而join()方法可以使用不同的分隔符来构建这个字符串，join()方法只接收一个参数，用作分隔符的字符串，然后返回包含所有数组项的字符串<br /><br />如果不给join()方法传入任何值，则使用逗号作为分隔符<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1,2,3];\nconsole.log(a.join());//'1,2,3'\nconsole.log(a.join(' '));//'1 2 3'\nconsole.log(a.join(''));//'123'\n\nvar b = new Array(10);\nb.join('-');//'---------'，9个连字符组成的字符串</span></span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">栈和队列方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【push()】</strong></span></span></p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。所以，该数组会改变原数组</span></span></span></span></span></p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [];\nconsole.log(a,a.push(1));//[1] 1\nconsole.log(a,a.push('a'));//[1,'a'] 2\nconsole.log(a,a.push(true, {}));//[1,'a',true,{}] 4\nconsole.log(a,a.push([5,6]));//[1,'a',true,{},[5,6]] 5</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">如果需要合并两个数组，可以使用apply方法<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1, 2, 3];\nvar b = [4, 5, 6];\nconsole.log(a,Array.prototype.push.apply(a, b));//[1,2,3,4,5,6] 6</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">[注意]如果使用call方法，则会把数组b整体看成一个参数<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1, 2, 3];\nvar b = [4, 5, 6];\nconsole.log(a,Array.prototype.push.call(a, b));//[1,2,3,[4,5,6]] 4</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">push()方法也可以向对象中添加元素，添加后的对象变成类数组对象，即新加入元素的键对应数组的索引，并且对象有一个length属性<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var obj = {a: 1};\nconsole.log(obj,[].push.call(obj, 2));// {a:1, 0:2, length: 1}\nconsole.log(obj,[].push.call(obj, [3]));// {a:1, 0:2, 1:[3], length: 2}</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【pop()】<br /><br /></strong>pop()方法从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。所以，该数组会改变原数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> a = ['a', 'b', 'c'<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">];\nconsole.log(a,a.pop()); </span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\"> ['a', 'b'] 'c'</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">对空数组使用pop()方法，不会报错，而是返回undefined<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [];\nconsole.log(a,a.pop()); // [] undefined</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【shift()】<br /><br /></strong>shift()方法移除数组中的第一个项并返回该项，同时数组的长度减1。所以，该数组会改变原数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = ['a', 'b', 'c'];\nconsole.log(a,a.shift());//['b', 'c'] 'a'</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">对空数组使用shift()方法，不会报错，而是返回undefined<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [];\nconsole.log(a,a.shift());// [] undefined</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【unshift()】<br /><br /></strong>unshift()方法在数组前端添加任意个项并返回新数组长度。所以，该数组会改变原数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = ['a', 'b', 'c'];\nconsole.log(a,a.unshift('x')); //['x', 'a', 'b', 'c'] 4</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">当使用多个参数调用unshift()时，参数是一次性插入的而非一次一个地插入。这意味着最终的数组中插入的元素的顺序和它们在参数列表中的顺序一致<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = ['a', 'b', 'c'];\nconsole.log(a,a.unshift('x','y','z')); //['x','y','z','a', 'b', 'c'] 6</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">[注意]在IE7-浏览器中，unshift()方法返回的总是undefined<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">//标准浏览器下，返回[1] 1；而IE7-浏览器下，返回[1] undefined\nvar a = [];\nconsole.log(a,a.unshift(1));</span></span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组排序方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【reverse()】</strong></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">reverse()方法用于反转数组的顺序，返回经过排序之后的数组；而原数组顺序也发生改变</span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var array = [1,2,4,3,5];\nconsole.log(array,array.reverse());//[5,3,4,2,1] [5,3,4,2,1]\nvar array = ['str',true,3];\nconsole.log(array,array.reverse());//[3,true,'str'] [3,true,'str']</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【sort()】</strong></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">默认情况下，sort()方法按字符串升序排列数组项，sort方法会调用每个数组项的toString()方法，然后比较得到的字符串排序，返回经过排序之后的数组，而原数组顺序也发生改变</span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var array = [1,2,4,3,5];\nconsole.log(array,array.sort());//[1,2,3,4,5] [1,2,3,4,5]\nvar array = ['3str',3,2,'2'];\nconsole.log(array,array.sort());//[2, \"2\", 3, \"3str\"] [2, \"2\", 3, \"3str\"]\nvar array = [1,5,10,50];\nconsole.log(array,array.sort());//[1, 10, 5, 50] [1, 10, 5, 50]</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果数组包含undefined元素，它们会被排到数组的尾部</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var array = ['3',3,undefined,2,'2'];\nconsole.log(array,array.sort());//[\"2\", 2, \"3\", 3, undefined] [\"2\", 2, \"3\", 3, undefined]</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">sort()方法可以接受一个比较函数作为参数，以便指定哪个值在哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个参数之后则返回一个正数</span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">function compare(value1,value2){\n    if(value1 &lt; value2){\n        return -1;\n    }else if(value1 &gt; value2){\n        return 1;\n    }else{\n        return 0;\n    }\n}\nvar array = ['5px',50,1,10];\n//当数字与字符串比较大小时，字符串'5px'会被转换成NaN，这样结果就是false\nconsole.log(array.sort(compare));//[\"5px\",1, 10, 50]</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">对于数值类型或valueOf()方法会返回数值类型的对象类型，比较函数可以简化</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">a = ['ant','Bug','cat','Dog'];\na.sort();//['Bug','Dog','ant','cat'];\na.sort(function(s,t){\n    var a = s.toLowerCase();\n    var b = t.toLowerCase();\n    if(a &lt; b)return -1;\n    if(a &gt; b)return 1;\n    return 0;\n});//['ant','bug','cat','dog']</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">【tips】使用sort()方法创建一个随机数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">function compare(){\n    return Math.random() - 0.5;\n}\nvar array = [1,2,3,4,5];\nconsole.log(array.sort(compare));//[2,1,5,4,3]</span></span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; white-space: normal; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组拼接方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【concat()】</strong></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">concat()方法基于当前数组中的所有项创建一个新数组，先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。所以concat()不影响原数组</span></span></span></span></span></p>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br />如果不给concat()方法传递参数时，它只是复制当前的数组；如果参数是一个或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中；如果传递的值不是数组，这些值就会被简单地添加到结果数组的末尾<br /><br /></span></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var numbers = [1,2];\nconsole.log(numbers,numbers.concat(3,4));//[1,2] [1,2,3,4]\nconsole.log(numbers,numbers.concat([5,4,3],[3,4,5],1,2));//[1,2] [1,2,5,4,3,3,4,5,1,2]\nconsole.log(numbers,numbers.concat(4,[5,[6,7]]));//[1,2] [1,2,4,5,[6,7]]</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">如果不提供参数，concat()方法返回当前数组的一个浅拷贝。所谓&ldquo;浅拷贝&rdquo;，指的是如果数组成员包括复合类型的值（比如对象），则新数组拷贝的是该值的引用<br /><br /></span></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">该方法实际只复制了数组的第一维，数组第一维存放的是第二维的引用，而第二维才是实际存放他们的内容</span>\n<span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> numbers = [1,2<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">];\n</span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> newNumbers =<span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> numbers.concat();\nconsole.log(numbers,newNumbers);</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">[1,2] [1,2]</span>\nnumbers[0] = 0<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">;\nconsole.log(numbers,newNumbers);</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">[0,2] [1,2]</span>\n\n<span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> numbers = [[1,2<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">]];\n</span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> newNumbers =<span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> numbers.concat();\nconsole.log(numbers,newNumbers);</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">[[1,2]] [[1,2]]</span>\nnumbers[0][0] = 0<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">;\nconsole.log(numbers,newNumbers);</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">[[0,2]] [[0,2]]</span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">concat()方法也可以用于将对象合并为数组，但是必须借助call()方法<br /><br /></span></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> newArray = Array.prototype.concat.call({ a: 1 }, { b: 2<span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> })\nconsole.log(newArray);</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\"> [{ a: 1 }, { b: 2 }]</span>\nconsole.log(newArray[0].a);<span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">//</span><span style=\"color: #008000; font-size: 12px !important; line-height: 1.5 !important;\">1</span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; white-space: normal; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">创建子数组方法</h1>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【slice()】</strong></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">slice()方法基于当前数组中的一个或多个项创建一个新数组，接受一个或两个参数，即要返回项的起始和结束位置，最后返回新数组，所以slice()不影响原数组</span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">slice(start,end)方法需要两个参数start和end，返回这个数组中从start位置到(但不包含)end位置的一个子数组；如果end为undefined或不存在，则返回从start位置到数组结尾的所有项</span></span></span></span></span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果start是负数，则start = max(length + start,0)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果end是负数，则end = max(length + end,0)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">start和end无法交换位置</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果没有参数，则返回原数组</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\">&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var numbers = [1,2,3,4,5];\nconsole.log(numbers.slice(2));//[3,4,5]\nconsole.log(numbers.slice(2,undefined));//[3,4,5]\nconsole.log(numbers.slice(2,3));//[3]\nconsole.log(numbers.slice(2,1));//[]\n\nconsole.log(numbers.slice(-3));//-3+5=2 -&gt; [3,4,5]\nconsole.log(numbers.slice(-8));//max(5 + -8,0)=0 -&gt; [1,2,3,4,5]\n\nconsole.log(numbers.slice(0,-3));//-3+5=2 -&gt; [1,2]\nconsole.log(numbers.slice(-2,-1));//-2+5=3;-1+5=4; -&gt; [4]</span></span>\n</pre>\n<p style=\"font-family: 'Courier New'; font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果不提供参数，slice()方法返回当前数组的一个浅拷贝</span></p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">//该方法实际只复制了数组的第一维，数组第一维存放的是第二维的引用，而第二维才是实际存放他们的内容\nvar numbers = [1,2];\nvar newNumbers = numbers.slice();\nconsole.log(numbers,newNumbers);//[1,2] [1,2]\nnumbers[0] = 0;\nconsole.log(numbers,newNumbers);//[0,2] [1,2]\n\nvar numbers = [[1,2]];\nvar newNumbers = numbers.slice();\nconsole.log(numbers,newNumbers);//[[1,2]] [[1,2]]\nnumbers[0][0] = 0;\nconsole.log(numbers,newNumbers);//[[0,2]] [[0,2]]</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">slice()方法涉及到Number()转型函数的隐式类型转换，当start被转换为NaN时，相当于start = 0；当end被转换为NaN时(end为undefined除外)，则输出空数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var numbers = [1,2,3,4,5];\nconsole.log(numbers.slice(NaN));//[1,2,3,4,5]\nconsole.log(numbers.slice(0,NaN));//[]\nconsole.log(numbers.slice(true,[3]));//[2,3]\nconsole.log(numbers.slice(null,undefined));//[1,2,3,4,5]\nconsole.log(numbers.slice({}));//[1,2,3,4,5]\nconsole.log(numbers.slice('2',[5]));//[3,4,5]</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">可以使用slice()方法将类数组对象变成真正的数组<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = Array.prototype.slice.call(arrayLike);\n\nArray.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 })// ['a', 'b']\nArray.prototype.slice.call(document.querySelectorAll(\"div\"));\nArray.prototype.slice.call(arguments);</span></span></pre>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; white-space: normal; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组删改方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【splice()】</strong></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">splice()和slice()拥有非常相似的名字，但它们的功能却有本质的区别。splice()方法用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，该方法会改变原数组</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">splice()的第一个参数start指定了插入或删除的起始位置。如果start是负数，则start = max(length + start,0)；如果start是NaN，则相当于start = 0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果只提供一个元素，相当于将原数组在指定位置拆分成两个数组</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice());// [1,2,3,4,5,6,7,8] []\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(4));// [1,2,3,4] [5,6,7,8]\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(-4));//-4+8=4; [1,2,3,4] [5,6,7,8]\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(-9));//max(-9+8,0)=0 [] [1,2,3,4,5,6,7,8]\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(NaN));//[] [1,2,3,4,5,6,7,8]</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">第二个参数number指定了应该从数组中删除的元素的个数。如果省略第二个参数，从起始点开始到数组结尾的所有元素都将被删除。如果number是负数或NaN或undefined，则number=0，因此不删除元素</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(0,2));// [3,4,5,6,7,8] [1,2]\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(10,2));// [1,2,3,4,5,6,7,8] []\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(1,100));// [1] [2,3,4,5,6,7,8]\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(1,-5));//[1,2,3,4,5,6,7,8] []\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(1,NaN));//[1,2,3,4,5,6,7,8] []\nvar a = [1,2,3,4,5,6,7,8];\nconsole.log(a,a.splice(1,undefined));//[1,2,3,4,5,6,7,8] []</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">如果后面还有更多的参数，则表示这些就是要被插入数组的新元素</span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1,2,3,4,5];\nconsole.log(a,a.splice(2,0,'a','b'));//[1,2,'a','b',3,4,5] []\nconsole.log(a,a.splice(2,2,[1,2],3));//[1,2,[1,2],3,3,4,5] ['a','b']</span></span></pre>\n<p>&nbsp;</p>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; white-space: normal; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组位置方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【indexOf()】</strong></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">indexOf(search,start)方法接收search和start两个参数，返回search首次出现的位置，如果没有找到则返回-1</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = [1,2,3,'1','2','3'];\nconsole.log(arr.indexOf('2'));//4\nconsole.log(arr.indexOf(3));//2\nconsole.log(arr.indexOf(0));//-1</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">start参数表示该搜索的开始位置，该方法会隐式调用Number()转型函数，将start非数字值(undefined除外)转换为数字。若忽略该参数或该参数为undefined或NaN时，start = 0</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = ['a','b','c','d','e','a','b'];\nconsole.log(arr.indexOf('a',undefined));//0\nconsole.log(arr.indexOf('a',NaN));//0\nconsole.log(arr.indexOf('a',1));//5\nconsole.log(arr.indexOf('a',true));//5\nconsole.log(arr.indexOf('a',-1));//max(0,-1+7)=6; -1\nconsole.log(arr.indexOf('a',-5));//max(0,-5+7)=2; 5\nconsole.log(arr.indexOf('a',-50));//max(0,-50+7)=0; 0</span></span></pre>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var person = {name: 'Nicholas'};\nvar people = [{name: 'Nicholas'}];\nvar morePeople = [person];\nalert(people.indexOf(person));//-1,因为person和people[0]虽然值相同，但是是两个引用\nalert(morePeople.indexOf(person));//0，因为person和morepeople[0]是同一个引用\nalert(morePeople.indexOf({name: 'Nicholas'}));//-1,因为不是同一个引用</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">indexOf()方法兼容写法</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">if (typeof Array.prototype.indexOf != \"function\") {\n  Array.prototype.indexOf = function (searchElement, fromIndex) {\n    var index = -1;\n    fromIndex = fromIndex * 1 || 0;\n    for (var k = 0, length = this.length; k &lt; length; k++) {\n      if (k &gt;= fromIndex &amp;&amp; this[k] === searchElement) {\n          index = k;\n          break;\n      }\n    }\n    return index;\n  };\n}</span></span>\n</pre>\n<p><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff; line-height: 1.5;\">【lastIndexOf()】</strong></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff; line-height: 1.5;\"><span style=\"font-weight: 400;\">与indexOf()不同，lastIndexOf()从右向左查找</span></strong></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff; line-height: 1.5;\"><span style=\"font-weight: 400;\">lastIndexOf(search,start)方法接收search和start两个参数，返回search第一次出现的位置，如果没有找到则返回-1</span></strong></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = [1,2,3,'1','2','3'];\nconsole.log(arr.lastIndexOf('2'));//4\nconsole.log(arr.lastIndexOf(3));//2\nconsole.log(arr.lastIndexOf(0));//-1</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">start表示该搜索的开始位置，该方法会隐式调用Number()转型函数，将start非数字值(undefined除外)转换为数。若忽略该参数或该参数为undefined或NaN时，start = 0</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">与字符串的lastIndexOf()方法不同，当search方法为负数时，search = max(0,length+search)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = ['a','b','c','d','e','a','b'];\nconsole.log(arr.lastIndexOf('b'));//6\nconsole.log(arr.lastIndexOf('b',undefined));//-1\nconsole.log(arr.lastIndexOf('a',undefined));//0\nconsole.log(arr.lastIndexOf('b',NaN));//-1\nconsole.log(arr.lastIndexOf('b',1));//1\nconsole.log(arr.lastIndexOf('b',-1));//max(0,-1+7)=6; 6\nconsole.log(arr.lastIndexOf('b',-5));//max(0,-5+7)=2; 1\nconsole.log(arr.lastIndexOf('b',-50));//max(0,-50+7)=0; -1</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">可以通过循环调用indexOf()或lastIndexOf()来找到所有匹配的项</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">function allIndexOf(array,value){\n    var result = [];\n    var pos = array.indexOf(value);\n    if(pos === -1){\n        return -1;\n    }\n    while(pos &gt; -1){\n        result.push(pos);\n        pos = array.indexOf(value,pos+1);\n    }\n    return result;\n}\nvar array = [1,2,3,3,2,1];\nconsole.log(allIndexOf(array,1));//[0,5]   </span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">lastIndexOf()方法兼容写法&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">if</span> (<span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">typeof</span> Array.prototype.lastIndexOf != \"function\"<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">) {\n  Array.prototype.lastIndexOf </span>= <span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">function</span><span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> (searchElement, fromIndex) {\n    </span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> index = -1, length = <span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">this</span><span style=\"font-size: 12px !important; line-height: 1.5 !important;\">.length;\n    fromIndex </span>= fromIndex * 1 || length - 1<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">;\n    </span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">for</span> (<span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">var</span> k = length - 1; k &gt; -1; k-=1<span style=\"font-size: 12px !important; line-height: 1.5 !important;\">) {\n        </span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">if</span> (k &lt;= fromIndex &amp;&amp; <span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">this</span>[k] ===<span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> searchElement) {\n            index </span>=<span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> k;\n            </span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">break</span><span style=\"font-size: 12px !important; line-height: 1.5 !important;\">;\n        }\n    }\n    </span><span style=\"color: #0000ff; font-size: 12px !important; line-height: 1.5 !important;\">return</span><span style=\"font-size: 12px !important; line-height: 1.5 !important;\"> index;\n  };\n}</span></pre>\n<p>&nbsp;</p>\n<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; white-space: normal; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">数组归并方法</h1>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【reduce()】</strong></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">reduce()方法需要两个参数。第一个是执行化简操作的函数。化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值</span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">化简函数接受四个参数，分别是：</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【1】初始变量，默认为数组的第一个元素值。函数第一次执行后的返回值作为函数第二次执行的初始变量，依次类推</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【2】当前变量，如果指定了第二个参数，则该变量为数组的第一个元素的值，否则，为第二个元素的值</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【3】当前变量对应的元素在数组中的索引(从0开始)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">【4】原数组对象</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">化简函数的这四个参数之中，只有前两个是必须的，后两个则是可选的</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">values.reduce(function(prev, cur, index, array){\n   //todo\n});</span></span></pre>\n<p><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">reduce()方法第二个(可选)的参数是一个传递给函数的初始值</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var a = [1,2,3,4,5];\nvar sum = a.reduce(function(x,y){return x+y},0);//数组求和\nvar product = a.reduce(function(x,y){return x*y},1);//数组求积\nvar max = a.reduce(function(x,y){return (x&gt;y)?x:y;});//求最大值</span></span></pre>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">[1, 2, 3, 4, 5].reduce(function(prev, cur){\n    console.log(prev, cur)\n    return prev+ cur;\n});\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15</span></span></pre>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">[1, 2, 3, 4, 5].reduce(function(prev, cur){\n    console.log(prev, cur);\n    return prev + cur;\n},0);\n// 0 1\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">[注意]reduce()方法的返回结果类型和传入的初始值相同<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">[1, 2, 3, 4, 5].reduce(function(prev, cur){\n    console.log(prev.sum, cur);\n    prev.sum = prev.sum + cur;\n    return prev;\n},{sum:0});\n//0 1\n//1 2\n//3 3\n//6 4\n//10 5\n//Object {sum: 15}</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">利用reduce()方法，可以写一个数组求和的sum方法<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">Array.prototype.sum = function (){\n    return this.reduce(function (prev, cur){\n        return prev + cur;\n    })\n};\n[3,4,5,6,10].sum();// 28</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">由于reduce方法依次处理每个元素，所以实际上还可以用它来搜索某个元素。比如，找出长度最长的数组元素<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">function findLongest(entries) {\n  return entries.reduce(function (prev, cur) {\n    return cur.length &gt; prev.length ? cur : prev;\n  }, '');\n}\nconsole.log(findLongest([1,2,3,'ab',4,'bcd',5,6785,4]));//'bcd'</span></span>\n</pre>\n<p><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: #ffffff;\">可以利用reduce()方法，实现二维数组的扁平化</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var matrix = [\n  [1, 2],\n  [3, 4],\n  [5, 6]\n];\n// 二维数组扁平化\nvar flatten = matrix.reduce(function (prev, cur) {\n  return prev.concat(cur);\n});\nconsole.log(flatten); // [1, 2, 3, 4, 5, 6]</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">在空数组上，不带初始值参数调用reduce()将导致类型错误异常。如果调用它的时候只有一个值&mdash;&mdash;数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值&mdash;&mdash;reduce()只是简单地返回那个值而不会调用化简函数<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var arr = [];\narr.reduce(function(){});//Uncaught TypeError: Reduce of empty array with no initial value\n\nvar arr = [];\narr.reduce(function(){},1);//1</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\">reduce()方法兼容写法<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">if (typeof Array.prototype.reduce != \"function\") {\n  Array.prototype.reduce = function (callback, initialValue ) {\n     var previous = initialValue, k = 0, length = this.length;\n     if (typeof initialValue === \"undefined\") {\n        previous = this[0];\n        k = 1;\n     }\n    if (typeof callback === \"function\") {\n      for (k; k &lt; length; k++) {\n         this.hasOwnProperty(k) &amp;&amp; (previous = callback(previous, this[k], k, this));\n      }\n    }\n    return previous;\n  };\n}</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"background-color: #ffffff; line-height: 1.5;\"><strong style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal;\">【reduceRight()】</strong><span style=\"color: #444444; font-family: Tahoma, Arial, Helvetica, sans-serif;\"><span style=\"font-size: 14px; white-space: normal;\"><br /><br /></span></span></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"color: #000000; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal;\">reduceRight()的工作原理和reduce()一样，不同的是它按照数组索引从高到低（从右到左）处理数组，而不是从低到高<br /><br /></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">var values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\n    console.log(prev,cur);\n    return prev + cur;\n});\nconsole.log(sum);\n//5 4\n//9 3\n//12 2\n//14 1\n//15</span></span><span style=\"color: #000000; font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: medium; white-space: normal;\"><br /></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><span style=\"background-color: #ffffff; line-height: 1.5;\">reduceRight()方法兼容写法<br /><br /></span></span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">if (typeof Array.prototype.reduceRight != \"function\") {\n  Array.prototype.reduceRight = function (callback, initialValue ) {\n    var length = this.length, k = length - 1, previous = initialValue;\n    if (typeof initialValue === \"undefined\") {\n        previous = this[length - 1];\n        k--;\n    }\n    if (typeof callback === \"function\") {\n       for (k; k &gt; -1; k-=1) {          \n          this.hasOwnProperty(k) &amp;&amp; (previous = callback(previous, this[k], k, this));\n       }\n    }\n    return previous;\n  };\n}</span></span></pre>\n<pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; list-style-type: none; list-style-image: none; overflow-wrap: break-word; font-size: 12px; font-family: 'Courier New' !important;\"><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br /><a style=\"font-family: 'Courier New'; font-size: 12px;\" title=\"https://www.cnblogs.com/xiaohuochai/p/5682621.html\" href=\"https://www.cnblogs.com/xiaohuochai/p/5682621.html\" target=\"_blank\" rel=\"noopener\">参考文档https://www.cnblogs.com/xiaohuochai/p/5682621.html</a><span style=\"font-family: Courier New;\"><span style=\"font-size: 12px;\"><br /></span></span></span></span></pre>"},{"id":7,"body":"<h1 style=\"margin: 0px 0px 16px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; color: #404040; text-rendering: optimizelegibility; font-size: 26px; font-family: -apple-system, BlinkMacSystemFont, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: #ffffff;\">循环遍历方法</h1>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\">1、for 循环</strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">for 循环是 Js 中最常用的一个循环工具，经常用于数组的循环遍历。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nfor (let i=0; i&lt;arr.length; i++){\n console.log(i,arr[i])\n}\n// 0 1\n// 1 2\n// 2 3</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"font-weight: 400;\"><strong>2、for in 循环</strong></span></strong></span></p>\n<p style=\"margin: 0px; padding: 3px 0px; outline: none; line-height: 30px; color: #222222; font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\">for in 循环主要用于遍历普通对象，i 代表对象的 key 值，obj[i] 代表对应的 value,当用它来遍历数组时候，多数情况下也能达到同样的效果，但是你不要这么做，这是有风险的，因为 i 输出为字符串形式，而不是数组需要的数字下标，这意味着在某些情况下，会发生字符串运算，导致数据错误，比如：'52'+1 = '521' 而不是我们需要的 53。</p>\n<p style=\"margin: 0px; padding: 3px 0px; outline: none; line-height: 30px; color: #222222; font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\">另外 for in 循环的时候，不仅遍历自身的属性，还会找到 prototype 上去，所以最好在循环体内加一个判断，就用 obj[i].hasOwnProperty(i)，这样就避免遍历出太多不需要的属性。</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let obj = {name:'zhou',age:'**'}\nfor(let i in obj){\n console.log(i,obj[i])\n}\n// name zhou\n// age **</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\">3、while 循环</strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">cars=[\"BMW\",\"Volvo\",\"Saab\",\"Ford\"];\nvar i=0;\nwhile (cars[i])\n{\nconsole.log(cars[i] + \"&lt;br&gt;\")\ni++;\n};</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>4、do while 循环</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">do while 循环是 while 循环的一个变体，它首先执行一次操作，然后才进行条件判断，是 true 的话再继续执行操作，是 false 的话循环结束。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let i = 3;\ndo{\n console.log(i)\n i--;\n}\nwhile(i&gt;0)\n// 3\n// 2\n// 1</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>5、Array forEach 循环</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">forEach循环，循环数组中每一个元素并采取操作， 没有返回值， 可以不用知道数组长度,他有三个参数，只有第一个是必需的，代表当前下标下的 value。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\narr.forEach(function(i,index){\n console.log(i,index)\n})\n// 1 0\n// 2 1\n// 3 2</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>6、Array map()方法</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet tt = arr.map(function(i){\n console.log(i)\n return i*2;\n})\n// [2,4,6]</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong><strong>7、Array filter() 方法</strong></strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">filter 方法是 Array 对象内置方法，它会返回通过过滤的元素，不改变原来的数组。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet tt = arr.filter(function(i){\n return i&gt;1;\n})\n// [2,3]</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>8、Array some() 方法</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">some() 方法用于检测数组中的元素是否满足指定条件（函数提供）,返回 boolean 值，不改变原数组。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet tt = arr.some(function(i){\n return i&gt;1;\n})\n// true</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>9、Array every() 方法</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供），返回 boolean 值，不改变原数组。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet tt = arr.some(function(i){\n return i&gt;1;\n})\n// 检测数组中元素是否都大于1\n// false</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>10、Array reduce()方法</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet ad = arr.reduce(function(i,j){\n return i+j;\n})\n// 6</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><strong>11、Array reduceRight()方法</strong></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #222222; font-weight: 400;\">reduceRight()方法,和 reduce() 功能是一样的，它是从数组的末尾处向前开始计算。</span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = [1,2,3];\nlet ad = arr.reduceRight(function(i,j){\n return i+j;\n})\n// 6</span></span></pre>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #000000;\"><strong>12、for of 循环</strong></span></strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><strong style=\"font-family: tahoma, arial, 'Microsoft YaHei'; font-size: 16px; background-color: #ffffff;\"><span style=\"color: #000000;\"><span style=\"color: #222222; font-weight: 400;\">for of 循环是 Es6 中新增的语句，用来替代 for in 和 forEach，它允许你遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代(Iterable data)的数据结构,注意它的兼容性。</span></span></strong></span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; overflow: auto; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"color: #333333; font-family: Menlo, Monaco, Consolas, Courier New, monospace;\"><span style=\"font-size: 14px; white-space: pre-wrap;\">let arr = ['name','age'];\nfor(let i of arr){\n console.log(i)\n}\n// name\n// age</span></span></pre>"}],"vue":[{"id":1,"body":"<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1. 钩子函数;</h1>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">beforeRouteLeave</span></code>在组件内部使用，离开当前页面的时候触发<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\">to</code><span style=\"color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">到哪里去 </span><span style=\"background-color: #f9f2f4; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">from</span><span style=\"background-color: #ffffff; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\"> 当前路由&nbsp;</span><span style=\"background-color: #f9f2f4; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px;\">next</span><span style=\"background-color: #ffffff; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;\">&nbsp;回调是否继续往下执行</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">beforeRouteLeave(to, from, next) {<br />  alert('确认离开当前页面')<br />  next()<br />}</code><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"></code></pre>\n<p>&nbsp;</p>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">  beforeRouteUpdate</span></code>在组件内部使用，参数发生变化的时候触发例如：同一个页面，参数不同，当然也可以使用<span style=\"background-color: #f9f2f4; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; white-space: pre-wrap;\">watch</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">beforeRouteUpdata(to, from, next) {<br /> <br />  next()<br />}</code></pre>\n<h1 class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">&nbsp;</h1>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2. 路由配置;</h1>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #f9f2f4; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; white-space: pre-wrap;\">非懒加载</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">import Vue from \"vue\"<br />import Router from \"vue-router\"<br />import </span>HelloWorld from \"@/components/HelloWorld\"<br /><span style=\"white-space: pre-wrap;\"><br />const router = [<br />  {path: \"/HelloWorld\",component: </span>HelloWorld}<br />];<br />export default router<code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\"></code></pre>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; white-space: pre-wrap; background-color: #f9f2f4;\"> 懒加载</span></p>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">import Vue from \"vue\"<br />import Router from \"vue-router\"</span><br /><span style=\"white-space: pre-wrap;\"><br />const router = [<br />  {path: \"/HelloWorld\",component: </span>resolve=&gt;require([\"@/components/HelloWorld\"],resolve)}<br />];<br /><br />export default router </pre>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-3. 路由对象;</h1>\n<h1 class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">srollBehavior</span></code><span style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\">&nbsp;通过路由来初始化滚动条</span></h1>\n<p>&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><span style=\"white-space: pre-wrap;\">import Router from \"vue-router\"<br />const option = [ </span>{path: \"/HelloWorld\",component: resolve=&gt;require([\"@/components/HelloWorld\"],resolve)} ];<br /><span style=\"white-space: pre-wrap;\">const router = new </span>Router({<br />  option,<br />  scrollBehavior(to,from,savedPosition) {<br />    if(savedPosition) {// 是否通过浏览器的返回、前进按钮、router.go()<br />      return savedPosition<br />    } else {// 否则将滚动条初始化<br />      return {x: 0 ,y: 0 }<br />    }<br />})</pre>\n<p>&nbsp;</p>\n<h1 class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\"> router.addRouters </span></code><span style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\">&nbsp;动态添加路由</span></h1>\n<p style=\"color: #000000; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\">&nbsp;</p>\n<pre style=\"margin-top: 0px; margin-bottom: 10px; padding: 9.5px; text-size-adjust: 100%; box-sizing: border-box; font-size: 14px; overflow: auto; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; line-height: 1.42857; color: #333333; word-break: break-all; overflow-wrap: break-word; background-color: #f5f5f5; border: 1px solid #cccccc; border-radius: 4px;\"><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">const routeOpt = router.options.routers.concat([</code>{path: \"/HelloWorld\",component: HelloWorld}])<br /><code class=\"scss\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre-wrap;\">router.addRouters(</code>routeOpt )</pre>"},{"id":2,"body":"<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1. Axios拦截;</h1>\n<p><span style=\"font-family: 'Helvetica Neue', Helvetica, STHeiTi, 'Microsoft YaHei'; font-size: 14px;\">新建 </span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">request.js</span></code> 对后端api接口进行封装 如下：</p>\n<p>&nbsp;</p>\n<div style=\"color: #f8f8f2; background-color: #272822; font-family: Consolas, 'Courier New', monospace; font-size: 14px; line-height: 19px; white-space: pre; width: 600px;\">\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">import</span>&nbsp;axios&nbsp;<span style=\"color: #f92672;\">from</span>&nbsp;<span style=\"color: #e6db74;\">\"axios\"</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">const</span>&nbsp;<span style=\"color: #ae81ff;\">httpServer</span>&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;axios.<span style=\"color: #a6e22e;\">create</span>({</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseURL<span style=\"color: #f92672;\">:</span>&nbsp;process.env.<span style=\"color: #ae81ff;\">VUE_APP_PROJET_API</span>,<span style=\"color: #88846f;\">//&nbsp;接口api&nbsp;地址</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timeout<span style=\"color: #f92672;\">:</span>&nbsp;<span style=\"color: #ae81ff;\">40000</span>,</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;})</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #88846f;\">//&nbsp;请求拦截</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;httpServer.interceptors.request.<span style=\"color: #a6e22e;\">use</span>(<span style=\"color: #fd971f; font-style: italic;\">config</span><span style=\"color: #66d9ef; font-style: italic;\">=&gt;</span>{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.headers[<span style=\"color: #e6db74;\">\"device\"</span>]&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;<span style=\"color: #e6db74;\">\"PC\"</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.headers[<span style=\"color: #e6db74;\">'token'</span>]&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;<span style=\"color: #e6db74;\">\"\"</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;config</div>\n<div>&nbsp;&nbsp;&nbsp;})</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #88846f;\">//&nbsp;响应拦截</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;httpServer.interceptors.response.<span style=\"color: #a6e22e;\">use</span>(<span style=\"color: #fd971f; font-style: italic;\">response</span><span style=\"color: #66d9ef; font-style: italic;\">=&gt;</span>{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">const</span>&nbsp;<span style=\"color: #ae81ff;\">data</span>&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;response.data</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">if</span>(data.status_code&nbsp;<span style=\"color: #f92672;\">===</span>&nbsp;<span style=\"color: #ae81ff;\">200</span>)&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;data</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span style=\"color: #f92672;\">else</span>&nbsp;<span style=\"color: #f92672;\">if</span>(data.status_code&nbsp;<span style=\"color: #f92672;\">===</span>&nbsp;<span style=\"color: #ae81ff;\">400</span>){</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e;\">alert</span>(data.message)</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">Promise</span>.<span style=\"color: #a6e22e;\">reject</span>(data.message)</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"color: #f92672;\">else</span>&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">Promise</span>.<span style=\"color: #a6e22e;\">reject</span>(data.message)</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;},<span style=\"color: #fd971f; font-style: italic;\">error</span><span style=\"color: #66d9ef; font-style: italic;\">=&gt;</span>{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e; text-decoration-line: underline;\">console</span>.<span style=\"color: #66d9ef;\">log</span>(error)</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">Promise</span>.<span style=\"color: #a6e22e;\">reject</span>(error)</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;})</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">export</span>&nbsp;<span style=\"color: #fd971f;\">default</span> httpServer</div>\n</div>\n<h1 class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">&nbsp;</h1>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2. API封装;</h1>\n<p>&nbsp;</p>\n<p><span style=\"font-family: 'Helvetica Neue', Helvetica, STHeiTi, 'Microsoft YaHei'; font-size: 14px;\">对后端&nbsp;</span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">api</span></code> 进行封装 新建&nbsp;<span style=\"background-color: #f9f2f4; color: #c7254e; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; white-space: pre-wrap;\">api.js</span></p>\n<p>&nbsp;</p>\n<div style=\"color: #f8f8f2; background-color: #272822; font-family: Consolas, 'Courier New', monospace; font-size: 14px; line-height: 19px; white-space: pre; width: 600px;\">\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">import</span>&nbsp;request&nbsp;<span style=\"color: #f92672;\">from</span>&nbsp;<span style=\"color: #e6db74;\">\"./request\"</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">const</span>&nbsp;<span style=\"color: #ae81ff;\">config</span>&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetSite<span style=\"color: #f92672;\">:</span>&nbsp;<span style=\"color: #e6db74;\">\"/api/type/list\"</span>,<span style=\"color: #88846f;\">// api地址</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetData<span style=\"color: #f92672;\">:</span>&nbsp;<span style=\"color: #e6db74;\">\"/api/getData\"</span>,</div>\n<div>&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">let</span>&nbsp;exports&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;<span style=\"color: #f92672;\">new</span>&nbsp;<span style=\"color: #a6e22e; text-decoration-line: underline;\">Object</span>()</div>\n<div><span style=\"color: #88846f;\"> // 循环暴露出多个API</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">for</span>(<span style=\"color: #66d9ef; font-style: italic;\">var</span>&nbsp;k&nbsp;<span style=\"color: #f92672;\">in</span>&nbsp;config){</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">let</span>&nbsp;url&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;config[k]</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exports[k]&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">function</span>&nbsp;(<span style=\"color: #fd971f; font-style: italic;\">data</span>,<span style=\"color: #fd971f; font-style: italic;\">type</span>){</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>&nbsp;<span style=\"color: #a6e22e;\">request</span>({</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url<span style=\"color: #f92672;\">:</span>&nbsp;url,<span style=\"color: #88846f;\">// api地址</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method<span style=\"color: #f92672;\">:</span>&nbsp;type&nbsp;<span style=\"color: #f92672;\">?</span>&nbsp;type&nbsp;<span style=\"color: #f92672;\">:</span>&nbsp;<span style=\"color: #e6db74;\">\"post\"</span>&nbsp;,<span style=\"color: #88846f;\">// 请求方式</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data<span style=\"color: #88846f;\">// 参数</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">export</span>&nbsp;<span style=\"color: #fd971f;\">default</span>&nbsp;exports</div>\n<div>-------------------------</div>\n<div style=\"padding-left: 10px;\">min.js 全局引入</div>\n<div><span style=\"color: #f92672;\"> import</span>&nbsp;http&nbsp;<span style=\"color: #f92672;\">from</span>&nbsp;<span style=\"color: #e6db74;\">'@/util/api.js'</span></div>\n<div style=\"line-height: 19px;\">\n<div style=\"padding-left: 10px;\">Vue.prototype.$http <span style=\"color: #f92672;\">=</span> http</div>\n</div>\n</div>\n<h1 class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">&nbsp;</h1>\n<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-2. 全局使用;</h1>\n<div style=\"color: #f8f8f2; background-color: #272822; font-family: Consolas, 'Courier New', monospace; font-size: 14px; line-height: 19px; white-space: pre; width: 600px;\">\n<div><span style=\"color: #fd971f;\"> this</span>.$http.<span style=\"color: #a6e22e;\">GetSite</span>().<span style=\"color: #a6e22e;\">then</span>(<span style=\"color: #fd971f; font-style: italic;\">res</span><span style=\"color: #66d9ef; font-style: italic;\">=&gt;</span>{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;}).<span style=\"color: #a6e22e;\">catch</span>(()<span style=\"color: #66d9ef; font-style: italic;\">=&gt;</span>{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;})</div>\n</div>"},{"id":5,"body":"<h1 id=\"a2\" class=\"title font anchor\" style=\"margin: 20px 0px 10px; padding: 0px; text-size-adjust: 100%; box-sizing: border-box; font-size: 36px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: #333333; background-color: #ffffff;\">1-1. 安装 postcss-pxtorem;</h1>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">npm install postcss-pxtorem --save</span></code>&nbsp;<span style=\"color: #333333; font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\"><span style=\"font-size: 18px; background-color: #ffffff;\">安装命令&nbsp; 找到&nbsp;</span><span style=\"font-size: 18px;\">.postcssrc.js&nbsp;</span></span><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">.postcssrs.js</span></code> 配置如下：</p>\n<p>&nbsp;</p>\n<div style=\"color: #f8f8f2; background-color: #272822; font-family: Consolas, 'Courier New', monospace; font-size: 14px; line-height: 19px; white-space: pre; width: 700px;\">\n<div>&nbsp;&nbsp;module.exports&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"plugins\"</span><span style=\"color: #f92672;\">:</span>&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"postcss-import\"</span><span style=\"color: #f92672;\">:</span>&nbsp;{},</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"postcss-url\"</span><span style=\"color: #f92672;\">:</span>&nbsp;{},</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"autoprefixer\"</span><span style=\"color: #f92672;\">:</span>&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;browsers<span style=\"color: #f92672;\">:</span>&nbsp;[<span style=\"color: #e6db74;\">'Android&nbsp;&gt;=&nbsp;4.0'</span>,&nbsp;<span style=\"color: #e6db74;\">'iOS&nbsp;&gt;=&nbsp;7'</span>]</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"postcss-pxtorem\"</span><span style=\"color: #f92672;\">:</span>&nbsp;{&nbsp;</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"rootValue\"</span><span style=\"color: #f92672;\">:</span> <span style=\"color: #ae81ff;\">32</span>,<span style=\"color: #88846f;\">//&nbsp;&nbsp;根字号</span></div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #e6db74;\">\"propList\"</span><span style=\"color: #f92672;\">:</span>&nbsp;[<span style=\"color: #e6db74;\">\"*\"</span>]</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;}</div>\n<div>}<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span></div>\n</div>\n<p>&nbsp;</p>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 16.2px; padding: 2px 4px; color: #c7254e; background-color: #f9f2f4; border-radius: 4px;\"><span style=\"background-color: transparent; color: inherit; font-size: inherit; white-space: pre-wrap;\">min.js</span></code>&nbsp;设置根字号：</p>\n<p>&nbsp;</p>\n<div style=\"color: #f8f8f2; background-color: #272822; font-family: Consolas, 'Courier New', monospace; font-size: 14px; line-height: 19px; white-space: pre; width: 700px;\">\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">function</span>&nbsp;<span style=\"color: #a6e22e;\">setRem</span>()&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp; <span style=\"color: #66d9ef; font-style: italic;\">const</span>&nbsp;<span style=\"color: #ae81ff;\">scale</span>&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;document.documentElement.clientWidth&nbsp;<span style=\"color: #f92672;\">/</span> <span style=\"color: #ae81ff;\">750</span></div>\n<div>&nbsp;&nbsp;&nbsp; document.documentElement.style.fontSize <span style=\"color: #f92672;\">=</span>&nbsp;(<span style=\"color: #ae81ff;\">32</span>&nbsp;<span style=\"color: #f92672;\">*</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">Math</span>.<span style=\"color: #66d9ef;\">min</span>(scale,&nbsp;<span style=\"color: #ae81ff;\">2</span>))&nbsp;<span style=\"color: #f92672;\">+</span>&nbsp;<span style=\"color: #e6db74;\">'px'</span></div>\n<div>&nbsp;&nbsp;&nbsp; window.size <span style=\"color: #f92672;\">=</span> <span style=\"color: #ae81ff;\">750</span><span style=\"color: #f92672;\">/</span>document.documentElement.clientWidth</div>\n<div>&nbsp;&nbsp;&nbsp;}</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e;\">setRem</span>()</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;window.<span style=\"color: #a6e22e;\">onresize</span>&nbsp;<span style=\"color: #f92672;\">=</span>&nbsp;<span style=\"color: #66d9ef; font-style: italic;\">function</span>()&nbsp;{</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e;\">setRem</span>()</div>\n<div>&nbsp;&nbsp;&nbsp;&nbsp;}</div>\n</div>"},{"id":9,"body":"<p>常用的生命周期</p>"},{"id":3,"body":"<p>vueConfig.js</p>"},{"id":4,"body":"<h2 id=\"安装\" style=\"line-height: 1.25; font-size: 1.65rem; padding-bottom: 0.3rem; border-bottom: 1px solid #eaecef; margin-top: -3.1rem; padding-top: 4.6rem; margin-bottom: 0px; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\">1-1安装&nbsp; &nbsp;npm install --save vuescroll</h2>\n<p style=\"line-height: 1.7; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">&nbsp;</p>\n<p style=\"line-height: 1.7; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">在你的入口文件处、或者局部引入：</p>\n<div class=\"language-javascript extra-class\" style=\"position: relative; background-color: #282c34; border-radius: 6px; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px; width: 500px;\">\n<pre class=\"language-javascript\" style=\"color: #cccccc; background-color: transparent; line-height: 1.4; padding: 1.25rem 1.5rem; margin-top: 0.85rem; margin-bottom: 0.85rem; border-radius: 6px; position: relative; z-index: 1;\"><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; color: #ffffff; padding: 0px; margin: 0px; font-size: 0.85em; background-color: transparent; border-radius: 0px;\"><span class=\"token keyword\" style=\"color: #cc99cd;\">import</span> Vue <span class=\"token keyword\" style=\"color: #cc99cd;\">from</span> <span class=\"token string\" style=\"color: #7ec699;\">'vue'</span><span class=\"token punctuation\" style=\"color: #cccccc;\">;</span>\n<span class=\"token keyword\" style=\"color: #cc99cd;\">import</span> vuescroll <span class=\"token keyword\" style=\"color: #cc99cd;\">from</span> <span class=\"token string\" style=\"color: #7ec699;\">'vuescroll'</span><span class=\"token punctuation\" style=\"color: #cccccc;\">;</span></code></pre>\n</div>\n<p>全局配置：在main.js里配置</p>\n<div class=\"language-javascript extra-class\" style=\"position: relative; background-color: #282c34; border-radius: 6px; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">\n<pre class=\"language-javascript\" style=\"color: #cccccc; background-color: transparent; line-height: 1.4; padding: 1.25rem 1.5rem; margin-top: 0.85rem; margin-bottom: 0.85rem; border-radius: 6px; position: relative; z-index: 1;\"><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; color: #ffffff; padding: 0px; margin: 0px; font-size: 0.85em; background-color: transparent; border-radius: 0px;\"></code>Vue<span class=\"token punctuation\" style=\"background-color: transparent; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em; color: #cccccc;\">.</span><span class=\"token function\" style=\"background-color: transparent; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em; color: #f08d49;\">use</span><span class=\"token punctuation\" style=\"background-color: transparent; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em; color: #cccccc;\">(</span><span style=\"background-color: transparent; color: #ffffff; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em;\">vuescroll</span><span class=\"token punctuation\" style=\"background-color: transparent; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em; color: #cccccc;\">,</span><span style=\"background-color: transparent; color: #ffffff; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em;\"> </span><span class=\"token punctuation\" style=\"background-color: transparent; font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 0.85em; color: #cccccc;\">{</span></pre>\n<pre class=\"language-javascript\" style=\"color: #cccccc; background-color: transparent; font-size: 16px; word-spacing: 0px; line-height: 1.4; padding: 1.25rem 1.5rem; margin-top: 0.85rem; margin-bottom: 0.85rem; border-radius: 6px; position: relative; z-index: 1;\"><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; color: #ffffff; padding: 0px; margin: 0px; font-size: 0.85em; background-color: transparent; border-radius: 0px;\">  ops<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n    <span class=\"token comment\" style=\"color: #999999;\">// The global config</span>\n  <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">,</span>\n  name<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token string\" style=\"color: #7ec699;\">'myScroll'</span> <span class=\"token comment\" style=\"color: #999999;\">// customize component name, default -&gt; vueScroll</span>\n<span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">)</span><span class=\"token punctuation\" style=\"color: #cccccc;\">;</span>\n\n<span class=\"token comment\" style=\"color: #999999;\">/**\n * or\n */</span>\n<span class=\"token class-name\" style=\"color: #f8c555;\">Vue</span><span class=\"token punctuation\" style=\"color: #cccccc;\">.</span>prototype<span class=\"token punctuation\" style=\"color: #cccccc;\">.</span>$vuescrollConfig <span class=\"token operator\" style=\"color: #67cdcc;\">=</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n  bar<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n    background<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token string\" style=\"color: #7ec699;\">'#000'</span>\n  <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n<span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">;</span></code></pre>\n</div>\n<p>使用：</p>\n<div class=\"language-html extra-class\" style=\"position: relative; background-color: #282c34; border-radius: 6px; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">\n<pre class=\"language-html\" style=\"color: #cccccc; background-color: transparent; line-height: 1.4; padding: 1.25rem 1.5rem; margin-top: 0.85rem; margin-bottom: 0.85rem; border-radius: 6px; position: relative; z-index: 1;\"><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; color: #ffffff; padding: 0px; margin: 0px; font-size: 0.85em; background-color: transparent; border-radius: 0px;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>template</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n  <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;myScroll<span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span><span style=\"background-color: transparent; color: #ffffff; font-size: 0.85em; word-spacing: normal;\"> </span><span class=\"token comment\" style=\"background-color: transparent; font-size: 0.85em; word-spacing: normal; color: #999999;\">&lt;!-- Your content... --&gt;</span><span style=\"background-color: transparent; color: #ffffff; font-size: 0.85em; word-spacing: normal;\"> </span><span class=\"token tag\" style=\"background-color: transparent; font-size: 0.85em; word-spacing: normal; color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/myScroll&gt;<br /></span></span></span></span></span></span><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>template</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span></code></pre>\n</div>\n<p>局部配置：</p>\n<div class=\"language-html extra-class\" style=\"position: relative; background-color: #282c34; border-radius: 6px; color: #2c3e50; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">\n<pre class=\"language-html\" style=\"color: #cccccc; background-color: transparent; line-height: 1.4; padding: 1.25rem 1.5rem; margin-top: 0.85rem; margin-bottom: 0.85rem; border-radius: 6px; position: relative; z-index: 1;\"><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; color: #ffffff; padding: 0px; margin: 0px; font-size: 0.85em; background-color: transparent; border-radius: 0px;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>template</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n  <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>div</span> <span class=\"token attr-name\" style=\"color: #e2777a;\">class</span><span class=\"token attr-value\" style=\"color: #7ec699;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">=</span><span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span>parent-element<span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span></span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n    <span class=\"token comment\" style=\"color: #999999;\">&lt;!-- bind your configurations --&gt;</span>\n    <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>vue-scroll</span> <span class=\"token attr-name\" style=\"color: #e2777a;\">:ops</span><span class=\"token attr-value\" style=\"color: #7ec699;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">=</span><span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span>ops<span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span></span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span> <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>div</span> <span class=\"token attr-name\" style=\"color: #e2777a;\">class</span><span class=\"token attr-value\" style=\"color: #7ec699;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">=</span><span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span>child-element<span class=\"token punctuation\" style=\"color: #cccccc;\">\"</span></span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>div</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span> <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>vue-scroll</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n  <span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>div</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n<span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>template</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span>\n<span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;</span>script</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\" style=\"color: #cc99cd;\">export</span> <span class=\"token keyword\" style=\"color: #cc99cd;\">default</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n    <span class=\"token function\" style=\"color: #f08d49;\">data</span><span class=\"token punctuation\" style=\"color: #cccccc;\">(</span><span class=\"token punctuation\" style=\"color: #cccccc;\">)</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n      <span class=\"token keyword\" style=\"color: #cc99cd;\">return</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n        ops<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span>\n          vuescroll<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span><span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">,</span>\n          scrollPanel<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span><span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">,</span>\n          rail<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span><span class=\"token punctuation\" style=\"color: #cccccc;\">}</span><span class=\"token punctuation\" style=\"color: #cccccc;\">,</span>\n          bar<span class=\"token operator\" style=\"color: #67cdcc;\">:</span> <span class=\"token punctuation\" style=\"color: #cccccc;\">{</span><span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n        <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n      <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n    <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n  <span class=\"token punctuation\" style=\"color: #cccccc;\">}</span>\n</span></span><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token tag\" style=\"color: #e2777a;\"><span class=\"token punctuation\" style=\"color: #cccccc;\">&lt;/</span>script</span><span class=\"token punctuation\" style=\"color: #cccccc;\">&gt;</span></span></code></pre>\n</div>\n<p>API地址：<a href=\"https://vuescrolljs.yvescoding.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vuescrolljs.yvescoding.org/zh/</a></p>"},{"id":7,"body":"<p>extend</p>"},{"id":6,"body":"<h1 id=\"articleContentId\" class=\"title-article\" style=\"box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 28px; overflow-wrap: break-word; color: #222226; word-break: break-all; font-variant-ligatures: common-ligatures; background-color: #ffffff;\">vue-datepicker的使用</h1>\n<h5 style=\"box-sizing: border-box; outline: 0px; margin: 8px 0px 16px; padding: 0px; font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif; font-size: 18px; color: #4f4f4f; line-height: 26px; overflow-wrap: break-word; font-variant-ligatures: common-ligatures; background-color: #ffffff;\">npm安装</h5>"}],"html":[{"id":1,"body":"html 基本用法"},{"id":2,"body":"<p>postmessage 交互</p>"},{"id":3,"body":"<p>header</p>"}],"ndoe":[{"id":1,"body":"ndoe 基本用法"},{"id":2,"body":"<p>router</p>"},{"id":3,"body":"<p>fs</p>"},{"id":4,"body":"<p>mongoDB</p>"}],"webpack":[{"id":1,"body":"webpack 基本用法"}],"canvas":[{"id":1,"body":"<p>测试新增列表</p>"},{"id":2,"body":"<p>画圆</p>"}]}